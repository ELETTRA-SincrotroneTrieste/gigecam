/*----- PROTECTED REGION ID(GigeCam.h) ENABLED START -----*/
//=============================================================================
//
// file :        GigeCam.h
//
// description : Include for the GigeCam class.
//
// project :     Gigabit Camera Server.
//
// $Author: giulio $
//
// $Revision: 1.30 $
// $Date: 2019-01-25 08:08:54 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/gigecam/src/GigeCam.h,v $
// $Log: GigeCam.h,v $
// Revision 1.30  2019-01-25 08:08:54  giulio
// Support to 180 degrees HWROI support
//
// Revision 1.29  2018-10-03 13:55:16  giulio
// Allowing set scale/offset when ccd is off, bugfixing
//
// Revision 1.28  2018-06-19 07:06:53  giulio
// Added acA2040-35-gm and acA2500-14gm support, Makefile for pylon5
//
// Revision 1.27  2017-04-19 07:00:53  giulio
// Fixed feedback mode
//
// Revision 1.26  2017-03-20 12:22:22  giulio
// Added aCA2000-50gm, added support for tango based trajectory feedback
//
// Revision 1.25  2014-12-30 08:33:57  giulio
// Added Model attribute
//
// Revision 1.24  2014-08-28 07:49:45  giulio
// Added imagesum attribute and scA1400 ccd
//
// Revision 1.23  2013-12-04 09:53:20  giulio
// Moved to Pylon3, added some eth tuning properties (band reservation, interpacket delay)
//
// Revision 1.22  2013-08-07 08:00:26  giulio
// Added mutexes in get_data commands; moved to Tango8; changed shutdown timeouts
//
// Revision 1.21  2013-07-09 08:34:16  giulio
// Added packet size configuration
//
// Revision 1.20  2013-05-29 12:49:17  giulio
// Implemented hwroiparam
//
// Revision 1.19  2013-05-17 13:14:08  giulio
// Added disable trigger timeout, stream grabber configurable
//
// Revision 1.18  2013-04-11 14:29:53  giulio
// Added digital image stabilization, saved roi_threshold
//
// Revision 1.17  2013-02-12 09:01:37  giulio
// Minimized bug in connect-disconnect with 2.3.3
//
// Revision 1.16  2013-02-08 15:12:34  giulio
// Added autoreconnect disable + avA1000 ccd
//
// Revision 1.15  2013-01-24 08:47:29  giulio
// Added binning
//
// Revision 1.14  2012-09-17 11:44:53  giulio
// Major updates (hw roi, auto gain/exposure, rnm..)
//
// Revision 1.13  2012-07-02 16:06:11  giulio
// Added saveparam command
//
// Revision 1.12  2012-05-30 12:42:54  giulio
// Support for 32/64 bit platforms, fixed init procedure
//
// Revision 1.11  2012-01-30 12:47:01  giulio
// Added attributes for image transfer optimization
//
// Revision 1.10  2011-12-28 08:00:53  giulio
// Extended exposure timeout to its maximu value. Store all ccd parameters through SaveScale command
//
// Revision 1.9  2011/10/24 07:31:48  giulio
// Added new ccd support (sony chipset)
//
// Revision 1.8  2011/06/14 12:19:08  giulio
// Fixed GetImag16 bug
//
// Revision 1.7  2011/05/13 09:44:00  giulio
// Fixed some bugs, moved to tango7, supported Pylon 2.3.3
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef GIGECAM_H
#define GIGECAM_H


#include <unistd.h>
#include <pthread.h>
#include <signal.h>
#include <sys/times.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <time.h>
#include <tango.h>
#include <pylon/gige/BaslerGigECamera.h>
#include <pylon/PylonIncludes.h>
#include <ostream>
#include <iostream>
#include <list>
#include <map>
#ifdef GIGECAM_RNM
#include <rnm_shm.h>
#include <rnm.h>
#include <k_rnmshare.h>
#include <rnmshare.h>
#endif
#include <buffer.h>
#include "ImageProc.h"

#define GIGECAM_DESC 80
#define GIGECAM_RNM_INDEX 0
#define GIGECAM_LOCK_BUF_SIZE 6

#define GIGECAM_ERR_CNT_SIZE      4
#define GIGECAM_ERR_CNT_CONN      0
#define GIGECAM_ERR_CNT_LOST      1
#define GIGECAM_ERR_CNT_CANCEL    2
#define GIGECAM_ERR_BN_LOST       3

#define GIGECAM_ERR_TIME_BARRIER  5

#define GIGECAM_COM_ERR_MAX_CNT   10
#define GIGECAM_TRIG_ERR_MAX_CNT  30

#define GIGECAM_RECONN_TOUT         10  /* reconnection timeout (sec) */
#define GIGECAM_LOCK_TOUT           100 /* timeout on basler api's which determines 
                                           automatic server shutdown (sec) */

using namespace Pylon;
using namespace Basler_GigECameraParams;
using namespace Basler_GigEStreamParams;

using namespace std;

typedef CBaslerGigECamera Camera_t;



class acqthread;

/*----- PROTECTED REGION END -----*/	//	GigeCam.h

/**
 *  GigeCam class description:
 *    This server connects to a camera using an external thread. Inside this thread, images are acquired and stored
 *    in an array of objects that also do the image processing.
 *    Currently this server support Basler Gigabit cameras.
 *    To make the server work correctly, it is necessary to setup the ethernet interface with
 *    an mtu > 8000 and disable autonegotiation.
 */

namespace GigeCam_ns
{
/*----- PROTECTED REGION ID(GigeCam::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	GigeCam::Additional Class Declarations

class GigeCam : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(GigeCam::Data Members) ENABLED START -----*/

	//		Add your own data members
public:

	friend class acqthread;
	friend class ImageProc;

	typedef ImageProc <unsigned char> ImageProc8;
	typedef ImageProc <unsigned short> ImageProc16;

	typedef struct  {
		/* fixed configuration parameters */
		string name, ipaddress;
		/* hardware parameters (configured directly), read when server starts up and then keeped in memory so when camera is changed the values are restored not from database but from the last modifications   */
		bool trigger;
		int32_t exposure;
		int32_t black_level;
		int32_t binning;
		double gain;
		/* when image depth is changed , acquisition thread must be restarted */
		int32_t img_depth, max_width, max_height;
		/* parameters changed on the fly before storing the image */
		double roi_threshold;
		char model[GIGECAM_DESC];

		int32_t process_mode;
		double hor_calibration,ver_calibration;        /* number of pixels per mm */
		double hor_pos_offset, ver_pos_offset;         /* mechanical offset of the camera */
		double ref_hor_pos_offset, ref_ver_pos_offset; /* reference position offset */
		double delta_ref_hor_pos_offset, delta_ref_ver_pos_offset; /* reference position offset */

		/*********** AUTOMATIC GAIN/EXPOSURE FEEDBACK PARAMETERS **********/
		/* automatic gain control internal parameters */
		double gain_auto_min, gain_auto_max, gain_auto_coeff;
		int32_t gain_auto_raw_min, gain_auto_raw_max;
		/* exposure min max */
		int32_t exposure_auto_min, exposure_auto_max;
		/*  automatic gain/exposure feedback counters */
		int32_t gain_auto_cnt, exposure_auto_cnt, gain_once_cnt, exposure_once_cnt;
		/* automatic gain/exposure feedback parameters */
		double auto_feedback_gain;
		int32_t auto_feedback_dws, auto_feedback_target_thres,  auto_feedback_deadband;
		/* feedback flags */
		bool gain_auto, exposure_auto, exposure_auto_once, gain_auto_once;
		double min_db_gain, max_db_gain;
		int32_t min_raw_gain, max_raw_gain;
		
		/******************************************************************/

		/************ AUTOMATIC/MANUAL ROI PARAMETERS *************/
		int32_t gridsize, lp_order;
		bool mirror, sw_roi, hw_roi, auto_roi, process_enable, plot_offset_axis,
			background_subtraction, fast_calc;
		int32_t manual_roi_param[4], hw_roi_param[4], auto_target_value, max_auto_target_err, min_auto_target_thres;
		/**********************************************************/

		short plot_mode, plot_level;
		double search_background_param[2], 
		       rotation; /* image rotation in degrees */
		ImageProc <unsigned char> *bckimg8;
		ImageProc <unsigned short> *bckimg16;
		int32_t *img_permutation;     /* permutation index vector used for image rotation */
		double hor_sign, ver_sign;
	
		bool configured;

		bool dis_enable;
		int32_t ref_raw_hor_pos, ref_raw_ver_pos;

	} cam_param_t;

	typedef struct  {
		int32_t old_frame_num,
		abs_frame_num;
		uint32_t old_bunch_num;
		int32_t buf_idx;
		uint32_t abs_frame_num_buf[GIGECAM_LOCK_BUF_SIZE],
		              estim_bunch_num_buf[GIGECAM_LOCK_BUF_SIZE],
		              real_bunch_num_buf[GIGECAM_LOCK_BUF_SIZE];
		int32_t consec_estim_err_counter;
	} bunch_number_lock_t;

	/* image object vector */
	vector<ImageProc8 *> img8;
	vector<ImageProc16 *> img16;

	cam_param_t *cam_param;
 	/* if true, date read from global properties */
	bool global_flag_prop;

	bunch_number_lock_t bunch_number_lock;
	struct timeval thread_state_time, last_state_time;
	int32_t img_nxt,img_cur;
	omni_mutex *in_mutex;

	std::map <string, int32_t> camera_name_index;
	std::map <string, int32_t> camera_ip_index;
	short cam_idx, num_cameras; /* index of the camera currently actived */

	int32_t error_counters[GIGECAM_ERR_CNT_SIZE]; /* lose connection, frame lost, frame canceled */

	/* flag used to detect link with the camera, stop refreshing data or start acquisition */
	bool link_flag, pause_flag, run_flag;

	/* refresh frequency of the image */
	double frequency;

	/* trigger the background acquisition */
	bool trigger_background;

	/* take the reference for the cross reference */
	bool take_reference;

	/* take the reference for the cross reference */
	long auto_restart_cnt;

	/* take the reference for the cross reference */
	long comm_err_consec_cnt, trig_err_consec_cnt;

	/* this variables are used to retreive the bunch number */
#ifdef GIGECAM_RNM
	//struct rnm_t *rnm;	
	//rnmshare_t *rnmshare;
#endif

	int32_t bunch_number;

	/* realtime buffers with bunch number synchronization */
	struct _buffer *buf_phase, *buf_area, *buf_hor_pos,
	       *buf_hor_sigma, *buf_saturation, *buf_ver_pos,
	       *buf_ver_sigma, *buf_intensity, *buf_fit_error, *buf_acquisition_counter,
	       *buf_max_val, *buf_gain, *buf_exposure;

	bool circ_buffer;

	string host_rw;
	long port_rw; 
	bool shutdown_flag;

	Tango::DevLong 	attr_Exposure_write, attr_ImageAcquisitionCounter_write;

	
	long imagesum_counter, imagesum_subtract_idx; 

	/*----- PROTECTED REGION END -----*/	//	GigeCam::Data Members

//	Device property data members
public:
	//	Configuration:	Table of configurations for the cameras that could be connected by this device.
	//  Format is:
	//  label:ip address:offset_pos:gain_pos:img depth:exposure:gain:binning:updown:mirror:trigger mode:pixelXmm hor:pixelXmm ver: hor mech offset: ver mech offset
	//  
	//  For example:
	//  pil_camera_p1.1:192.168.1.10:10:0.01:8:10:350:1:0:0:1:15:10:0:0
	vector<string>	configuration;
	//	AutoRoi:	Enable autoroi (to minimize the area used for image processing
	Tango::DevBoolean	autoRoi;
	//	AutoRoiParam:	Parameters for autoroi configuration algorithm.
	//  param[0]=image decimation size (10 -> max image size)
	//  param[1]=low pass filter (1-10)
	//  param[2]=intensity threshold (0-10)
	vector<Tango::DevDouble>	autoRoiParam;
	//	ImageProcessing:	Enable image processing
	Tango::DevBoolean	imageProcessing;
	//	PlotMode:	Set plot mode:
	//  short[0]=  0x1=plot axis & roi 0x2=plot spot contour 0x3=plot axis and spot contour
	//  short[1]= plot color
	vector<Tango::DevShort>	plotMode;
	//	FastCalculation:	Enable fast calculation algorithm.
	Tango::DevBoolean	fastCalculation;
	//	ImageBufferSize:	Number of images stored in the circular buffer
	Tango::DevShort	imageBufferSize;
	//	DataBufferSize:	Number of samples stored in the circular buffer for main parameters (horpos,verpos
	Tango::DevLong	dataBufferSize;
	//	SearchBackgroundParam:	Search background parameters:
	//  double[0]=number of background levels
	//  double[1]=derivative factor
	vector<Tango::DevDouble>	searchBackgroundParam;
	//	RnmEnabled:	Enable rnm data support
	Tango::DevBoolean	rnmEnabled;
	//	AutoConnect:	If true connect to a camera when the device starts. (There must be only one camera supported).
	Tango::DevBoolean	autoConnect;
	//	RnmIndex:	Rnm index of camera
	Tango::DevLong	rnmIndex;
	//	ProcessMode:	0=raw
	//  1=gaussian fit
	//  2=gaussian asymmetric
	//  4=confiteor
	Tango::DevLong	processMode;
	//	RoiParam:	RoiParam
	vector<Tango::DevLong>	roiParam;
	//	SwRoi:	true=manual roi enabled, false=manual roi disabled
	Tango::DevBoolean	swRoi;
	//	HwRoi:	
	Tango::DevBoolean	hwRoi;
	//	RefPosOffset:	Target reference in mm (hor,ver)
	vector<Tango::DevDouble>	refPosOffset;
	//	GainAutoParam:	auto gain enable(1)/disable(0)
	//  gain min
	//  gain max
	vector<Tango::DevDouble>	gainAutoParam;
	//	ExposureAutoParam:	auto exposure enable(1)/disable(0)
	//  exposure min
	//  exposure max
	vector<Tango::DevDouble>	exposureAutoParam;
	//	HwRoiParam:	Hardware ROI
	vector<Tango::DevLong>	hwRoiParam;
	//	AutoTargetValue:	
	Tango::DevLong	autoTargetValue;
	//	AutoFeedbackGain:	
	Tango::DevDouble	autoFeedbackGain;
	//	AutoFeedbackDws:	
	Tango::DevLong	autoFeedbackDws;
	//	AutoFeedbackDeadband:	
	Tango::DevLong	autoFeedbackDeadband;
	//	AutoFeedbackTargetThres:	
	Tango::DevLong	autoFeedbackTargetThres;
	//	Binning:	Binning
	Tango::DevLong	binning;
	//	AutoReconnect:	
	Tango::DevBoolean	autoReconnect;
	//	RoiThreshold:	
	Tango::DevDouble	roiThreshold;
	//	StreamGrabberBuffer:	Number of streamgrabber buffers used by pylon library
	Tango::DevLong	streamGrabberBuffer;
	//	PacketSize:	Ethernet packet size
	Tango::DevLong	packetSize;
	//	FitNumCores:	Number of cores used into fitting algorithm
	Tango::DevLong	fitNumCores;
	//	InterPacketDelay:	Delay between packets in ticks (1 tick=8ns.)
	Tango::DevLong	interPacketDelay;
	//	ReserveBandwidth:	
	Tango::DevLong	reserveBandwidth;

//	Attribute data members
public:
	Tango::DevDouble	*attr_HorPos_read;
	Tango::DevDouble	*attr_VerPos_read;
	Tango::DevLong	*attr_MaxVal_read;
	Tango::DevLong	*attr_CountMaxVal_read;
	Tango::DevDouble	*attr_HorSigma_read;
	Tango::DevDouble	*attr_VerSigma_read;
	Tango::DevDouble	*attr_Area_read;
	Tango::DevDouble	*attr_HVCovar_read;
	Tango::DevLong	*attr_CameraCounter_read;
	Tango::DevLong	*attr_AcquisitionCounter_read;
	Tango::DevLong	*attr_Height_read;
	Tango::DevLong	*attr_Width_read;
	Tango::DevLong	*attr_ProcessingTime_read;
	Tango::DevDouble	*attr_Frequency_read;
	Tango::DevBoolean	*attr_Trigger_read;
	Tango::DevLong	*attr_Exposure_read;
	Tango::DevDouble	*attr_Gain_read;
	Tango::DevDouble	*attr_RoiThreshold_read;
	Tango::DevBoolean	*attr_AutoRoi_read;
	Tango::DevBoolean	*attr_SwRoi_read;
	Tango::DevBoolean	*attr_HwRoi_read;
	Tango::DevShort	*attr_PlotMode_read;
	Tango::DevLong	*attr_IconSize_read;
	Tango::DevShort	*attr_LowPassOrder_read;
	Tango::DevDouble	*attr_Rotation_read;
	Tango::DevBoolean	*attr_Mirror_read;
	Tango::DevShort	*attr_ImageDepth_read;
	Tango::DevBoolean	*attr_BackgroundSubtraction_read;
	Tango::DevBoolean	*attr_EnableProcessing_read;
	Tango::DevBoolean	*attr_FastProcessing_read;
	Tango::DevDouble	*attr_Saturation_read;
	Tango::DevShort	*attr_PlotLevel_read;
	Tango::DevBoolean	*attr_Pause_read;
	Tango::DevString	*attr_Label_read;
	Tango::DevDouble	*attr_HorPosRelative_read;
	Tango::DevDouble	*attr_VerPosRelative_read;
	Tango::DevDouble	*attr_Phase_read;
	Tango::DevDouble	*attr_ScaleHor_read;
	Tango::DevDouble	*attr_ScaleVer_read;
	Tango::DevDouble	*attr_OffsetHor_read;
	Tango::DevDouble	*attr_OffsetVer_read;
	Tango::DevBoolean	*attr_PlotOffsetAxis_read;
	Tango::DevDouble	*attr_Intensity_read;
	Tango::DevDouble	*attr_SignHor_read;
	Tango::DevDouble	*attr_SignVer_read;
	Tango::DevLong	*attr_ProcessMode_read;
	Tango::DevLong	*attr_DebugThread_read;
	Tango::DevDouble	*attr_BlackLevel_read;
	Tango::DevLong	*attr_ImageBufferSize_read;
	Tango::DevLong	*attr_ImageAcquisitionCounter_read;
	Tango::DevBoolean	*attr_ExposureAutoEnable_read;
	Tango::DevLong	*attr_ExposureAutoMin_read;
	Tango::DevLong	*attr_ExposureAutoMax_read;
	Tango::DevBoolean	*attr_GainAutoEnable_read;
	Tango::DevDouble	*attr_GainAutoMin_read;
	Tango::DevDouble	*attr_GainAutoMax_read;
	Tango::DevLong	*attr_AutoTargetValue_read;
	Tango::DevDouble	*attr_AutoFeedbackGain_read;
	Tango::DevLong	*attr_AutoFeedbackDws_read;
	Tango::DevLong	*attr_AutoFeedbackTargetThres_read;
	Tango::DevLong	*attr_AutoFeedbackDeadBand_read;
	Tango::DevLong	*attr_FitError_read;
	Tango::DevLong	*attr_BunchNumber_read;
	Tango::DevLong	*attr_MeanIntensityThreshold_read;
	Tango::DevLong	*attr_Binning_read;
	Tango::DevBoolean	*attr_DISEnable_read;
	Tango::DevBoolean	*attr_DisableTriggerTimeout_read;
	Tango::DevLong	*attr_ImageSumSamples_read;
	Tango::DevString	*attr_Model_read;
	Tango::DevBoolean	*attr_FeedbackMode_read;
	Tango::DevDouble	*attr_MeanIntensity_read;
	Tango::DevBoolean	*attr_FeedbackError_read;
	Tango::DevDouble	*attr_SearchBackgroundParam_read;
	Tango::DevDouble	*attr_HorProfile_read;
	Tango::DevDouble	*attr_VerProfile_read;
	Tango::DevLong	*attr_ErrorCounters_read;
	Tango::DevLong	*attr_TimeStamp_read;
	Tango::DevLong	*attr_AutoRoiParam_read;
	Tango::DevLong	*attr_RoiParam_read;
	Tango::DevDouble	*attr_HorFitProfile_read;
	Tango::DevDouble	*attr_VerFitProfile_read;
	Tango::DevLong	*attr_HwRoiParam_read;
	Tango::DevUChar	*attr_Image8_read;
	Tango::DevLong	*attr_Image8Icon_read;
	Tango::DevUShort	*attr_Image16_read;
	Tango::DevLong	*attr_Image16Icon_read;
	Tango::DevUChar	*attr_Image8Counter_read;
	Tango::DevUShort	*attr_Image16Counter_read;
	Tango::DevLong	*attr_ImageSum_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	GigeCam(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	GigeCam(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	GigeCam(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~GigeCam() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : GigeCam::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : GigeCam::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute HorPos related methods
 *	Description: Horizontal position of the spot int the image. (Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_HorPos(Tango::Attribute &attr);
	virtual bool is_HorPos_allowed(Tango::AttReqType type);
/**
 *	Attribute VerPos related methods
 *	Description: Horizontal position of the spot int the image.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_VerPos(Tango::Attribute &attr);
	virtual bool is_VerPos_allowed(Tango::AttReqType type);
/**
 *	Attribute MaxVal related methods
 *	Description: Maximum pixel value.(Measure)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_MaxVal(Tango::Attribute &attr);
	virtual bool is_MaxVal_allowed(Tango::AttReqType type);
/**
 *	Attribute CountMaxVal related methods
 *	Description: Number of pixels equal to the maximum pixel value (255/4095).(Measure)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_CountMaxVal(Tango::Attribute &attr);
	virtual bool is_CountMaxVal_allowed(Tango::AttReqType type);
/**
 *	Attribute HorSigma related methods
 *	Description: Horizontal standard deviation of the spot in the image.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_HorSigma(Tango::Attribute &attr);
	virtual bool is_HorSigma_allowed(Tango::AttReqType type);
/**
 *	Attribute VerSigma related methods
 *	Description: Vertical standard deviation of the spot in the image.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_VerSigma(Tango::Attribute &attr);
	virtual bool is_VerSigma_allowed(Tango::AttReqType type);
/**
 *	Attribute Area related methods
 *	Description: Area of the spot inside the roi.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Area(Tango::Attribute &attr);
	virtual bool is_Area_allowed(Tango::AttReqType type);
/**
 *	Attribute HVCovar related methods
 *	Description: Covariance between horizontal and vertical plane.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_HVCovar(Tango::Attribute &attr);
	virtual bool is_HVCovar_allowed(Tango::AttReqType type);
/**
 *	Attribute CameraCounter related methods
 *	Description: Camera counter (0-65535).(Connection Diagnostics)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_CameraCounter(Tango::Attribute &attr);
	virtual bool is_CameraCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute AcquisitionCounter related methods
 *	Description: Absolute acquisition image counter.(Connection Diagnostics)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_AcquisitionCounter(Tango::Attribute &attr);
	virtual bool is_AcquisitionCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute Height related methods
 *	Description: Image height
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Height(Tango::Attribute &attr);
	virtual bool is_Height_allowed(Tango::AttReqType type);
/**
 *	Attribute Width related methods
 *	Description: Image width
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Width(Tango::Attribute &attr);
	virtual bool is_Width_allowed(Tango::AttReqType type);
/**
 *	Attribute ProcessingTime related methods
 *	Description: Processing time in us.(Processing Setup)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ProcessingTime(Tango::Attribute &attr);
	virtual bool is_ProcessingTime_allowed(Tango::AttReqType type);
/**
 *	Attribute Frequency related methods
 *	Description: Frame rate in Hz. (Camera Setup)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Frequency(Tango::Attribute &attr);
	virtual bool is_Frequency_allowed(Tango::AttReqType type);
/**
 *	Attribute Trigger related methods
 *	Description: Trigger mode (Camera Setup)
 *               false = internal trigger (max frame rate)
 *               true = external trigger
 *               The trigger will be on the rising edge of the pulse.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_Trigger(Tango::Attribute &attr);
	virtual void write_Trigger(Tango::WAttribute &attr);
	virtual bool is_Trigger_allowed(Tango::AttReqType type);
/**
 *	Attribute Exposure related methods
 *	Description: Exposure time in us.(Camera Setup)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Exposure(Tango::Attribute &attr);
	virtual void write_Exposure(Tango::WAttribute &attr);
	virtual bool is_Exposure_allowed(Tango::AttReqType type);
/**
 *	Attribute Gain related methods
 *	Description: Gain value in dB.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Gain(Tango::Attribute &attr);
	virtual void write_Gain(Tango::WAttribute &attr);
	virtual bool is_Gain_allowed(Tango::AttReqType type);
/**
 *	Attribute RoiThreshold related methods
 *	Description: Scaling factor of the automatic roi threshold.
 *               Automatic roi threshol is the background level that is automatically found by autoroi routine.(Processing Setup)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_RoiThreshold(Tango::Attribute &attr);
	virtual void write_RoiThreshold(Tango::WAttribute &attr);
	virtual bool is_RoiThreshold_allowed(Tango::AttReqType type);
/**
 *	Attribute AutoRoi related methods
 *	Description: Enable autoroi.\nAutoroi routine find the background level and the roi region where the spot is.\nWhen swroi is enabled also, the roi is the roi defined by the user by roiparam\nattribute but the background level is automatically calculated and taken into accout\nin position and standard deviation calculations.(Processing Setup)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_AutoRoi(Tango::Attribute &attr);
	virtual void write_AutoRoi(Tango::WAttribute &attr);
	virtual bool is_AutoRoi_allowed(Tango::AttReqType type);
/**
 *	Attribute SwRoi related methods
 *	Description: Enable roi define by the user.(Display Options) 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_SwRoi(Tango::Attribute &attr);
	virtual void write_SwRoi(Tango::WAttribute &attr);
	virtual bool is_SwRoi_allowed(Tango::AttReqType type);
/**
 *	Attribute HwRoi related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_HwRoi(Tango::Attribute &attr);
	virtual void write_HwRoi(Tango::WAttribute &attr);
	virtual bool is_HwRoi_allowed(Tango::AttReqType type);
/**
 *	Attribute PlotMode related methods
 *	Description: Set plotting mode.(Display Options)\n0x0: plot nothing\n0x1:plot position axis and roi region\n0x2:plot spot region\n0x3: plot both
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_PlotMode(Tango::Attribute &attr);
	virtual void write_PlotMode(Tango::WAttribute &attr);
	virtual bool is_PlotMode_allowed(Tango::AttReqType type);
/**
 *	Attribute IconSize related methods
 *	Description: Horizontal size of the decimated image used to find automatically the roi.\n(Shadow Parameters)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_IconSize(Tango::Attribute &attr);
	virtual void write_IconSize(Tango::WAttribute &attr);
	virtual bool is_IconSize_allowed(Tango::AttReqType type);
/**
 *	Attribute LowPassOrder related methods
 *	Description: Low pass fiter order used to magnify the main spot on the camera.\n(Shadow Parameters)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_LowPassOrder(Tango::Attribute &attr);
	virtual void write_LowPassOrder(Tango::WAttribute &attr);
	virtual bool is_LowPassOrder_allowed(Tango::AttReqType type);
/**
 *	Attribute Rotation related methods
 *	Description: Image rotation in degrees. (Display Options)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Rotation(Tango::Attribute &attr);
	virtual void write_Rotation(Tango::WAttribute &attr);
	virtual bool is_Rotation_allowed(Tango::AttReqType type);
/**
 *	Attribute Mirror related methods
 *	Description: Mirror the image (true) on the horizontal plane. (Display Options)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_Mirror(Tango::Attribute &attr);
	virtual void write_Mirror(Tango::WAttribute &attr);
	virtual bool is_Mirror_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageDepth related methods
 *	Description: Image depth. Valide values are 8 o 16.(Camera Setup)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_ImageDepth(Tango::Attribute &attr);
	virtual void write_ImageDepth(Tango::WAttribute &attr);
	virtual bool is_ImageDepth_allowed(Tango::AttReqType type);
/**
 *	Attribute BackgroundSubtraction related methods
 *	Description: Enable (true) background subtraction. (Processing Setup)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_BackgroundSubtraction(Tango::Attribute &attr);
	virtual void write_BackgroundSubtraction(Tango::WAttribute &attr);
	virtual bool is_BackgroundSubtraction_allowed(Tango::AttReqType type);
/**
 *	Attribute EnableProcessing related methods
 *	Description: Enable (true) image processing.(Processing Setup)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_EnableProcessing(Tango::Attribute &attr);
	virtual void write_EnableProcessing(Tango::WAttribute &attr);
	virtual bool is_EnableProcessing_allowed(Tango::AttReqType type);
/**
 *	Attribute FastProcessing related methods
 *	Description: Enable fast processing.\nImage processing will be done automatically on a \ndecimate (binning) image to reduce computation time. (Processing Setup)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_FastProcessing(Tango::Attribute &attr);
	virtual void write_FastProcessing(Tango::WAttribute &attr);
	virtual bool is_FastProcessing_allowed(Tango::AttReqType type);
/**
 *	Attribute Saturation related methods
 *	Description: Ratio between the number of the pixels that reached the\nmaximum value and the number of the pixels of the spot.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Saturation(Tango::Attribute &attr);
	virtual bool is_Saturation_allowed(Tango::AttReqType type);
/**
 *	Attribute PlotLevel related methods
 *	Description: Color of the plots (0-255 8bit) (0-4095 16bit).(Display Options)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_PlotLevel(Tango::Attribute &attr);
	virtual void write_PlotLevel(Tango::WAttribute &attr);
	virtual bool is_PlotLevel_allowed(Tango::AttReqType type);
/**
 *	Attribute Pause related methods
 *	Description: Pause the image acquisition but don't give up the connection with the camera. (Camera Control)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_Pause(Tango::Attribute &attr);
	virtual void write_Pause(Tango::WAttribute &attr);
	virtual bool is_Pause_allowed(Tango::AttReqType type);
/**
 *	Attribute Label related methods
 *	Description: Label of the camera currently acquired. It corresponds to the first element of the row\nof the table which contains the camera initialization paramenters.(Camera Control)\n
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_Label(Tango::Attribute &attr);
	virtual bool is_Label_allowed(Tango::AttReqType type);
/**
 *	Attribute HorPosRelative related methods
 *	Description: Horizontal relative position of the spot int the image. (Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_HorPosRelative(Tango::Attribute &attr);
	virtual bool is_HorPosRelative_allowed(Tango::AttReqType type);
/**
 *	Attribute VerPosRelative related methods
 *	Description: Vertical relative position of the spot int the image. (Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_VerPosRelative(Tango::Attribute &attr);
	virtual bool is_VerPosRelative_allowed(Tango::AttReqType type);
/**
 *	Attribute Phase related methods
 *	Description: Inclination in degrees of the image.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Phase(Tango::Attribute &attr);
	virtual bool is_Phase_allowed(Tango::AttReqType type);
/**
 *	Attribute ScaleHor related methods
 *	Description: Set the number of pixels per mm in the horizontal plane
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ScaleHor(Tango::Attribute &attr);
	virtual void write_ScaleHor(Tango::WAttribute &attr);
	virtual bool is_ScaleHor_allowed(Tango::AttReqType type);
/**
 *	Attribute ScaleVer related methods
 *	Description: Set the number of pixels per mm in the vertical plane
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ScaleVer(Tango::Attribute &attr);
	virtual void write_ScaleVer(Tango::WAttribute &attr);
	virtual bool is_ScaleVer_allowed(Tango::AttReqType type);
/**
 *	Attribute OffsetHor related methods
 *	Description: Horizontal mechanical offset in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_OffsetHor(Tango::Attribute &attr);
	virtual void write_OffsetHor(Tango::WAttribute &attr);
	virtual bool is_OffsetHor_allowed(Tango::AttReqType type);
/**
 *	Attribute OffsetVer related methods
 *	Description: Vertical mechanical offset in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_OffsetVer(Tango::Attribute &attr);
	virtual void write_OffsetVer(Tango::WAttribute &attr);
	virtual bool is_OffsetVer_allowed(Tango::AttReqType type);
/**
 *	Attribute PlotOffsetAxis related methods
 *	Description: Plot reference position axis. Reference position coordinates are (OffsetHor,OffsetVer)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_PlotOffsetAxis(Tango::Attribute &attr);
	virtual void write_PlotOffsetAxis(Tango::WAttribute &attr);
	virtual bool is_PlotOffsetAxis_allowed(Tango::AttReqType type);
/**
 *	Attribute Intensity related methods
 *	Description: Sum of pixel values inside the roi
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Intensity(Tango::Attribute &attr);
	virtual bool is_Intensity_allowed(Tango::AttReqType type);
/**
 *	Attribute SignHor related methods
 *	Description: Horizontal versus of the axis (1,-1)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_SignHor(Tango::Attribute &attr);
	virtual bool is_SignHor_allowed(Tango::AttReqType type);
/**
 *	Attribute SignVer related methods
 *	Description: Vertical versus of the axis (1,-1)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_SignVer(Tango::Attribute &attr);
	virtual bool is_SignVer_allowed(Tango::AttReqType type);
/**
 *	Attribute ProcessMode related methods
 *	Description: Processing mode:\n0=raw rms\n1=gaussian fit\n2=asymmetric gaussian fit\n3=confiteor
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ProcessMode(Tango::Attribute &attr);
	virtual void write_ProcessMode(Tango::WAttribute &attr);
	virtual bool is_ProcessMode_allowed(Tango::AttReqType type);
/**
 *	Attribute DebugThread related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_DebugThread(Tango::Attribute &attr);
	virtual bool is_DebugThread_allowed(Tango::AttReqType type);
/**
 *	Attribute BlackLevel related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_BlackLevel(Tango::Attribute &attr);
	virtual void write_BlackLevel(Tango::WAttribute &attr);
	virtual bool is_BlackLevel_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageBufferSize related methods
 *	Description: Set image circular buffer size
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ImageBufferSize(Tango::Attribute &attr);
	virtual void write_ImageBufferSize(Tango::WAttribute &attr);
	virtual bool is_ImageBufferSize_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageAcquisitionCounter related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ImageAcquisitionCounter(Tango::Attribute &attr);
	virtual void write_ImageAcquisitionCounter(Tango::WAttribute &attr);
	virtual bool is_ImageAcquisitionCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute ExposureAutoEnable related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_ExposureAutoEnable(Tango::Attribute &attr);
	virtual void write_ExposureAutoEnable(Tango::WAttribute &attr);
	virtual bool is_ExposureAutoEnable_allowed(Tango::AttReqType type);
/**
 *	Attribute ExposureAutoMin related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ExposureAutoMin(Tango::Attribute &attr);
	virtual void write_ExposureAutoMin(Tango::WAttribute &attr);
	virtual bool is_ExposureAutoMin_allowed(Tango::AttReqType type);
/**
 *	Attribute ExposureAutoMax related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ExposureAutoMax(Tango::Attribute &attr);
	virtual void write_ExposureAutoMax(Tango::WAttribute &attr);
	virtual bool is_ExposureAutoMax_allowed(Tango::AttReqType type);
/**
 *	Attribute GainAutoEnable related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_GainAutoEnable(Tango::Attribute &attr);
	virtual void write_GainAutoEnable(Tango::WAttribute &attr);
	virtual bool is_GainAutoEnable_allowed(Tango::AttReqType type);
/**
 *	Attribute GainAutoMin related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_GainAutoMin(Tango::Attribute &attr);
	virtual void write_GainAutoMin(Tango::WAttribute &attr);
	virtual bool is_GainAutoMin_allowed(Tango::AttReqType type);
/**
 *	Attribute GainAutoMax related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_GainAutoMax(Tango::Attribute &attr);
	virtual void write_GainAutoMax(Tango::WAttribute &attr);
	virtual bool is_GainAutoMax_allowed(Tango::AttReqType type);
/**
 *	Attribute AutoTargetValue related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_AutoTargetValue(Tango::Attribute &attr);
	virtual void write_AutoTargetValue(Tango::WAttribute &attr);
	virtual bool is_AutoTargetValue_allowed(Tango::AttReqType type);
/**
 *	Attribute AutoFeedbackGain related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_AutoFeedbackGain(Tango::Attribute &attr);
	virtual void write_AutoFeedbackGain(Tango::WAttribute &attr);
	virtual bool is_AutoFeedbackGain_allowed(Tango::AttReqType type);
/**
 *	Attribute AutoFeedbackDws related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_AutoFeedbackDws(Tango::Attribute &attr);
	virtual void write_AutoFeedbackDws(Tango::WAttribute &attr);
	virtual bool is_AutoFeedbackDws_allowed(Tango::AttReqType type);
/**
 *	Attribute AutoFeedbackTargetThres related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_AutoFeedbackTargetThres(Tango::Attribute &attr);
	virtual void write_AutoFeedbackTargetThres(Tango::WAttribute &attr);
	virtual bool is_AutoFeedbackTargetThres_allowed(Tango::AttReqType type);
/**
 *	Attribute AutoFeedbackDeadBand related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_AutoFeedbackDeadBand(Tango::Attribute &attr);
	virtual void write_AutoFeedbackDeadBand(Tango::WAttribute &attr);
	virtual bool is_AutoFeedbackDeadBand_allowed(Tango::AttReqType type);
/**
 *	Attribute FitError related methods
 *	Description: Fit error
 *               0=no error
 *               1=hor fit err
 *               2= ver fit err
 *               3=hor/ver fit err
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_FitError(Tango::Attribute &attr);
	virtual bool is_FitError_allowed(Tango::AttReqType type);
/**
 *	Attribute BunchNumber related methods
 *	Description: Absolute acquisition image counter.(Connection Diagnostics)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_BunchNumber(Tango::Attribute &attr);
	virtual bool is_BunchNumber_allowed(Tango::AttReqType type);
/**
 *	Attribute MeanIntensityThreshold related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_MeanIntensityThreshold(Tango::Attribute &attr);
	virtual void write_MeanIntensityThreshold(Tango::WAttribute &attr);
	virtual bool is_MeanIntensityThreshold_allowed(Tango::AttReqType type);
/**
 *	Attribute Binning related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Binning(Tango::Attribute &attr);
	virtual void write_Binning(Tango::WAttribute &attr);
	virtual bool is_Binning_allowed(Tango::AttReqType type);
/**
 *	Attribute DISEnable related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_DISEnable(Tango::Attribute &attr);
	virtual void write_DISEnable(Tango::WAttribute &attr);
	virtual bool is_DISEnable_allowed(Tango::AttReqType type);
/**
 *	Attribute DisableTriggerTimeout related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_DisableTriggerTimeout(Tango::Attribute &attr);
	virtual void write_DisableTriggerTimeout(Tango::WAttribute &attr);
	virtual bool is_DisableTriggerTimeout_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageSumSamples related methods
 *	Description: number of images summed in a ``moving`` sum image
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ImageSumSamples(Tango::Attribute &attr);
	virtual void write_ImageSumSamples(Tango::WAttribute &attr);
	virtual bool is_ImageSumSamples_allowed(Tango::AttReqType type);
/**
 *	Attribute Model related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_Model(Tango::Attribute &attr);
	virtual bool is_Model_allowed(Tango::AttReqType type);
/**
 *	Attribute FeedbackMode related methods
 *	Description: true: when MeanIntensity is below MeanIntensityThreshold, the camera state is turned to FAULT
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_FeedbackMode(Tango::Attribute &attr);
	virtual void write_FeedbackMode(Tango::WAttribute &attr);
	virtual bool is_FeedbackMode_allowed(Tango::AttReqType type);
/**
 *	Attribute MeanIntensity related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_MeanIntensity(Tango::Attribute &attr);
	virtual bool is_MeanIntensity_allowed(Tango::AttReqType type);
/**
 *	Attribute FeedbackError related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_FeedbackError(Tango::Attribute &attr);
	virtual bool is_FeedbackError_allowed(Tango::AttReqType type);
/**
 *	Attribute SearchBackgroundParam related methods
 *	Description: param[0]: number of background levels\nparam[1]: derivative percentage threshold
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 2
 */
	virtual void read_SearchBackgroundParam(Tango::Attribute &attr);
	virtual void write_SearchBackgroundParam(Tango::WAttribute &attr);
	virtual bool is_SearchBackgroundParam_allowed(Tango::AttReqType type);
/**
 *	Attribute HorProfile related methods
 *	Description: Horizontal profile of the image.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 3000
 */
	virtual void read_HorProfile(Tango::Attribute &attr);
	virtual bool is_HorProfile_allowed(Tango::AttReqType type);
/**
 *	Attribute VerProfile related methods
 *	Description: Vertical profile of the image.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 3000
 */
	virtual void read_VerProfile(Tango::Attribute &attr);
	virtual bool is_VerProfile_allowed(Tango::AttReqType type);
/**
 *	Attribute ErrorCounters related methods
 *	Description: Error counters:\ncounter[0]: acquisition error\ncounter[1]: packets lost\ncounter[2]: packets canceled\n(Connection Diagnostics)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 10
 */
	virtual void read_ErrorCounters(Tango::Attribute &attr);
	virtual bool is_ErrorCounters_allowed(Tango::AttReqType type);
/**
 *	Attribute TimeStamp related methods
 *	Description: Current timestamp (unix time) of the current image
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 2
 */
	virtual void read_TimeStamp(Tango::Attribute &attr);
	virtual bool is_TimeStamp_allowed(Tango::AttReqType type);
/**
 *	Attribute AutoRoiParam related methods
 *	Description: Coordinates of the automatic roi (x1,y1,x2,y2)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_AutoRoiParam(Tango::Attribute &attr);
	virtual bool is_AutoRoiParam_allowed(Tango::AttReqType type);
/**
 *	Attribute RoiParam related methods
 *	Description: Coordinates of the manual roi(x1,y1,x2,y2). (Display Options)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_RoiParam(Tango::Attribute &attr);
	virtual void write_RoiParam(Tango::WAttribute &attr);
	virtual bool is_RoiParam_allowed(Tango::AttReqType type);
/**
 *	Attribute HorFitProfile related methods
 *	Description: Horizontal profile of the image.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 3000
 */
	virtual void read_HorFitProfile(Tango::Attribute &attr);
	virtual bool is_HorFitProfile_allowed(Tango::AttReqType type);
/**
 *	Attribute VerFitProfile related methods
 *	Description: Horizontal profile of the image.(Measure)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 3000
 */
	virtual void read_VerFitProfile(Tango::Attribute &attr);
	virtual bool is_VerFitProfile_allowed(Tango::AttReqType type);
/**
 *	Attribute HwRoiParam related methods
 *	Description: Coordinates of the hardware roi(x1,y1,x2,y2). (Display Options)
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_HwRoiParam(Tango::Attribute &attr);
	virtual void write_HwRoiParam(Tango::WAttribute &attr);
	virtual bool is_HwRoiParam_allowed(Tango::AttReqType type);
/**
 *	Attribute Image8 related methods
 *	Description: Image (8bit depth) of the camera.
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Image max = 3000 x 3000
 */
	virtual void read_Image8(Tango::Attribute &attr);
	virtual bool is_Image8_allowed(Tango::AttReqType type);
/**
 *	Attribute Image8Icon related methods
 *	Description: Decimated version of the image used to find the roi region
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Image max = 400 x 400
 */
	virtual void read_Image8Icon(Tango::Attribute &attr);
	virtual bool is_Image8Icon_allowed(Tango::AttReqType type);
/**
 *	Attribute Image16 related methods
 *	Description: Image (18bit depth) of the camera
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Image max = 3000 x 3000
 */
	virtual void read_Image16(Tango::Attribute &attr);
	virtual bool is_Image16_allowed(Tango::AttReqType type);
/**
 *	Attribute Image16Icon related methods
 *	Description: Decimated version of the image used to find the roi region
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Image max = 400 x 400
 */
	virtual void read_Image16Icon(Tango::Attribute &attr);
	virtual bool is_Image16Icon_allowed(Tango::AttReqType type);
/**
 *	Attribute Image8Counter related methods
 *	Description: Image (8bit depth) of the camera.
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Image max = 3000 x 3000
 */
	virtual void read_Image8Counter(Tango::Attribute &attr);
	virtual bool is_Image8Counter_allowed(Tango::AttReqType type);
/**
 *	Attribute Image16Counter related methods
 *	Description: Image (18bit depth) of the camera
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Image max = 3000 x 3000
 */
	virtual void read_Image16Counter(Tango::Attribute &attr);
	virtual bool is_Image16Counter_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageSum related methods
 *	Description: Moving sum image
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Image max = 3000 x 3000
 */
	virtual void read_ImageSum(Tango::Attribute &attr);
	virtual bool is_ImageSum_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : GigeCam::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Start related method
	 *	Description: Connect to a camera and start image acquisition. (Camera Controls)
	 *
	 *	@param argin camera label or ip number
	 */
	virtual void start(Tango::DevString argin);
	virtual bool is_Start_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: Stop the acquisition on the camera and disconnect from it. (Camera Controls)
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Restart connection on the current selected camera. (Camera Controls)
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command ListCamera related method
	 *	Description: List cameras that could be connected to this device. (Camera Controls)
	 *
	 *	@returns camera labels
	 */
	virtual Tango::DevVarStringArray *list_camera();
	virtual bool is_ListCamera_allowed(const CORBA::Any &any);
	/**
	 *	Command AcquireBackground related method
	 *	Description: Acquire background image. (Processing Setup)
	 *
	 */
	virtual void acquire_background();
	virtual bool is_AcquireBackground_allowed(const CORBA::Any &any);
	/**
	 *	Command GetImage8 related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarCharArray *get_image8(const Tango::DevVarLongArray *argin);
	virtual bool is_GetImage8_allowed(const CORBA::Any &any);
	/**
	 *	Command GetImage16 related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarUShortArray *get_image16(const Tango::DevVarLongArray *argin);
	virtual bool is_GetImage16_allowed(const CORBA::Any &any);
	/**
	 *	Command GetHorPos related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_hor_pos(const Tango::DevVarLongArray *argin);
	virtual bool is_GetHorPos_allowed(const CORBA::Any &any);
	/**
	 *	Command GetVerPos related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_ver_pos(const Tango::DevVarLongArray *argin);
	virtual bool is_GetVerPos_allowed(const CORBA::Any &any);
	/**
	 *	Command GetHorSigma related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_hor_sigma(const Tango::DevVarLongArray *argin);
	virtual bool is_GetHorSigma_allowed(const CORBA::Any &any);
	/**
	 *	Command GetVerSigma related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_ver_sigma(const Tango::DevVarLongArray *argin);
	virtual bool is_GetVerSigma_allowed(const CORBA::Any &any);
	/**
	 *	Command GetArea related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_area(const Tango::DevVarLongArray *argin);
	virtual bool is_GetArea_allowed(const CORBA::Any &any);
	/**
	 *	Command GetAcquisitionCounter related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarLongArray *get_acquisition_counter(const Tango::DevVarLongArray *argin);
	virtual bool is_GetAcquisitionCounter_allowed(const CORBA::Any &any);
	/**
	 *	Command GetSaturation related method
	 *	Description: Get saturation values from the circular buffers
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_saturation(const Tango::DevVarLongArray *argin);
	virtual bool is_GetSaturation_allowed(const CORBA::Any &any);
	/**
	 *	Command SetReference related method
	 *	Description: 
	 *
	 */
	virtual void set_reference();
	virtual bool is_SetReference_allowed(const CORBA::Any &any);
	/**
	 *	Command GetPhase related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_phase(const Tango::DevVarLongArray *argin);
	virtual bool is_GetPhase_allowed(const CORBA::Any &any);
	/**
	 *	Command SaveScale related method
	 *	Description: Save pixel size calibration
	 *
	 */
	virtual void save_scale();
	virtual bool is_SaveScale_allowed(const CORBA::Any &any);
	/**
	 *	Command RestoreScale related method
	 *	Description: Restore pixel calibration
	 *
	 */
	virtual void restore_scale();
	virtual bool is_RestoreScale_allowed(const CORBA::Any &any);
	/**
	 *	Command SetMeasurePoint related method
	 *	Description: Set measure point in the image
	 *
	 *	@param argin horizontal pixel position, vertical pixel position
	 */
	virtual void set_measure_point(const Tango::DevVarLongArray *argin);
	virtual bool is_SetMeasurePoint_allowed(const CORBA::Any &any);
	/**
	 *	Command ClearMeasurePoints related method
	 *	Description: Clear all reference points in the image
	 *
	 */
	virtual void clear_measure_points();
	virtual bool is_ClearMeasurePoints_allowed(const CORBA::Any &any);
	/**
	 *	Command GetIntensity related method
	 *	Description: Get intensity values from the circular buffers
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_intensity(const Tango::DevVarLongArray *argin);
	virtual bool is_GetIntensity_allowed(const CORBA::Any &any);
	/**
	 *	Command GetHorProfile related method
	 *	Description: 
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_hor_profile(const Tango::DevVarLongArray *argin);
	virtual bool is_GetHorProfile_allowed(const CORBA::Any &any);
	/**
	 *	Command GetVerProfile related method
	 *	Description: 
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_ver_profile(const Tango::DevVarLongArray *argin);
	virtual bool is_GetVerProfile_allowed(const CORBA::Any &any);
	/**
	 *	Command GetHorFitProfile related method
	 *	Description: 
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_hor_fit_profile(const Tango::DevVarLongArray *argin);
	virtual bool is_GetHorFitProfile_allowed(const CORBA::Any &any);
	/**
	 *	Command GetVerFitProfile related method
	 *	Description: 
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_ver_fit_profile(const Tango::DevVarLongArray *argin);
	virtual bool is_GetVerFitProfile_allowed(const CORBA::Any &any);
	/**
	 *	Command SaveParam related method
	 *	Description: Save all ccd / processing parameters except scale
	 *
	 */
	virtual void save_param();
	virtual bool is_SaveParam_allowed(const CORBA::Any &any);
	/**
	 *	Command ClearReference related method
	 *	Description: 
	 *
	 */
	virtual void clear_reference();
	virtual bool is_ClearReference_allowed(const CORBA::Any &any);
	/**
	 *	Command ExposureAutoOnce related method
	 *	Description: 
	 *
	 */
	virtual void exposure_auto_once();
	virtual bool is_ExposureAutoOnce_allowed(const CORBA::Any &any);
	/**
	 *	Command GainAutoOnce related method
	 *	Description: 
	 *
	 */
	virtual void gain_auto_once();
	virtual bool is_GainAutoOnce_allowed(const CORBA::Any &any);
	/**
	 *	Command GetFitError related method
	 *	Description: 0=no error
	 *               1=hor fit err
	 *               2=ver fit err
	 *               3=hor/ver fit er
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarLongArray *get_fit_error(const Tango::DevVarLongArray *argin);
	virtual bool is_GetFitError_allowed(const CORBA::Any &any);
	/**
	 *	Command GetBunchNumber related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarLongArray *get_bunch_number(const Tango::DevVarLongArray *argin);
	virtual bool is_GetBunchNumber_allowed(const CORBA::Any &any);
	/**
	 *	Command GetMaxVal related method
	 *	Description: 
	 *
	 *	@param argin mode (0,1,2), more parameters
	 *	@returns 
	 */
	virtual Tango::DevVarLongArray *get_max_val(const Tango::DevVarLongArray *argin);
	virtual bool is_GetMaxVal_allowed(const CORBA::Any &any);
	/**
	 *	Command GetGain related method
	 *	Description: 
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarDoubleArray *get_gain(const Tango::DevVarLongArray *argin);
	virtual bool is_GetGain_allowed(const CORBA::Any &any);
	/**
	 *	Command GetExposure related method
	 *	Description: 
	 *
	 *	@param argin 
	 *	@returns 
	 */
	virtual Tango::DevVarLongArray *get_exposure(const Tango::DevVarLongArray *argin);
	virtual bool is_GetExposure_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : GigeCam::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(GigeCam::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes
	bool init_buffers(GigeCam *gige);
	void delete_buffers(GigeCam *gige);
	void info_log(string s);
	timespec difftime(timespec, timespec);
	void set_roi_param(int32_t *roi_param);
	double timespec2ms(timespec ts);
protected :
	acqthread *acqloop;
	struct timeval socket_state_time;
	bool get_configuration(void);
	void modify_configuration(bool,bool);
	bool get_indexes (int32_t, int32_t, int32_t *, int32_t *);


	/*----- PROTECTED REGION END -----*/	//	GigeCam::Additional Method prototypes
};

/*----- PROTECTED REGION ID(GigeCam::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	GigeCam::Additional Classes Definitions

}	//	End of namespace

#endif   //	GigeCam_H
