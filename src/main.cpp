/*PROTECTED REGION ID(GigeCam::main.cpp) ENABLED START*/
static const char *RcsId = "$Id: main.cpp,v 1.5 2019-03-09 11:32:40 giulio Exp $";
//=============================================================================
//
// file :        GigeCam.cpp
//
// description : C++ source for the GigeCam device server main.
//               The main rule is to initialise (and create) the Tango
//               system and to create the DServerClass singleton.
//                The main should be the same for every Tango device server.
//
// project :     Gigabit Camera Server.
//
// $Author: giulio $
//
// $Revision: 1.5 $
// $Date: 2019-03-09 11:32:40 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/gigecam/src/main.cpp,v $
// $Log: main.cpp,v $
// Revision 1.5  2019-03-09 11:32:40  giulio
// Rnmshare initialized in main.cpp to avoid crashes at rnmshare_init
//
// Revision 1.4  2014-08-28 07:49:45  giulio
// Added imagesum attribute and scA1400 ccd
//
// Revision 1.3  2011-05-13 09:44:00  giulio
// Fixed some bugs, moved to tango7, supported Pylon 2.3.3
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <rnm_shm.h>
#include <rnm.h>
#include <k_rnmshare.h>
#include <rnmshare.h>

#include <tango.h>
#include <sched.h>

short parent = getpid();

int main(int argc,char *argv[])
{

	/*
	struct sched_param mysched;
	mysched.sched_priority = sched_get_priority_max(SCHED_RR) - 1;
	if( sched_setscheduler( 0, SCHED_RR, &mysched ) == -1 ) {
		cerr << "Launch server as root to gain maximum priority!" << endl;
 	}
	*/

#ifdef GIGECAM_RNM
	cout << "Initializing rnmshare in main.cpp" << endl;
	if (rnmshare_init(0) < 0) {
		cout << "Error initializing rnmshare (rnmshare_init) in main.cpp" << endl;
	}
	else {	
		int32_t bunch_number;
		char check; 
		rnm_bunch_number_get_value(0, 1, &bunch_number, &check);
		cout << "Init rnmshare done in main.cpp, bunchnumber: " << bunch_number << endl;
	}
#endif

	Tango::Util *tg;
	try
	{
		// Initialise the device server
		//----------------------------------------
		tg = Tango::Util::init(argc,argv);

		// Create the device server singleton 
		//	which will create everything
		//----------------------------------------
		tg->server_init(false);

		// Run the endless loop
		//----------------------------------------
		cout << "Ready to accept request" << endl;
		tg->server_run();
	}
	catch (bad_alloc)
	{
		cout << "Can't allocate memory to store device object !!!" << endl;
		cout << "Exiting" << endl;
	}
	catch (CORBA::Exception &e)
	{
		Tango::Except::print_exception(e);
		
		cout << "Received a CORBA_Exception" << endl;
		cout << "Exiting" << endl;
	}
	tg->server_cleanup();
	return(0);
}


/*PROTECTED REGION END*/	//	GigeCam::main.cpp
