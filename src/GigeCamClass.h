/*----- PROTECTED REGION ID(GigeCamClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        GigeCamClass.h
//
// description : Include for the GigeCamClass root class.
//               This class is the singleton class for.
//               the GigeCam device class..
//               It contains all properties and methods which the .
//               GigeCam requires only once e.g. the commands.
//
// project :     Gigabit Camera Server.
//
// $Author: giulio $
//
// $Revision: 1.19 $
// $Date: 2017-04-19 07:00:53 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/gigecam/src/GigeCamClass.h,v $
// $Log: GigeCamClass.h,v $
// Revision 1.19  2017-04-19 07:00:53  giulio
// Fixed feedback mode
//
// Revision 1.18  2017-03-20 12:22:22  giulio
// Added aCA2000-50gm, added support for tango based trajectory feedback
//
// Revision 1.17  2014-12-30 08:33:57  giulio
// Added Model attribute
//
// Revision 1.16  2014-08-28 07:49:45  giulio
// Added imagesum attribute and scA1400 ccd
//
// Revision 1.15  2013-08-07 08:00:26  giulio
// Added mutexes in get_data commands; moved to Tango8; changed shutdown timeouts
//
// Revision 1.14  2013-05-29 12:49:17  giulio
// Implemented hwroiparam
//
// Revision 1.13  2013-05-17 13:14:08  giulio
// Added disable trigger timeout, stream grabber configurable
//
// Revision 1.12  2013-04-11 14:29:53  giulio
// Added digital image stabilization, saved roi_threshold
//
// Revision 1.11  2013-01-24 08:47:29  giulio
// Added binning
//
// Revision 1.10  2012-09-17 11:44:53  giulio
// Major updates (hw roi, auto gain/exposure, rnm..)
//
// Revision 1.9  2012-07-02 16:06:11  giulio
// Added saveparam command
//
// Revision 1.8  2012-01-30 12:47:01  giulio
// Added attributes for image transfer optimization
//
// Revision 1.7  2011-06-14 12:19:08  giulio
// Fixed GetImag16 bug
//
// Revision 1.6  2011/05/13 09:44:00  giulio
// Fixed some bugs, moved to tango7, supported Pylon 2.3.3
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef GIGECAMCLASS_H
#define GIGECAMCLASS_H

#include <tango.h>
#include <GigeCam.h>

/*----- PROTECTED REGION END -----*/	//	GigeCamClass.h


namespace GigeCam_ns
{
/*----- PROTECTED REGION ID(GigeCamClass::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute HorPos class definition
class HorPosAttrib: public Tango::Attr
{
public:
	HorPosAttrib():Attr("HorPos",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~HorPosAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_HorPos(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_HorPos_allowed(ty);}
};

//	Attribute VerPos class definition
class VerPosAttrib: public Tango::Attr
{
public:
	VerPosAttrib():Attr("VerPos",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~VerPosAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_VerPos(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_VerPos_allowed(ty);}
};

//	Attribute MaxVal class definition
class MaxValAttrib: public Tango::Attr
{
public:
	MaxValAttrib():Attr("MaxVal",
			Tango::DEV_LONG, Tango::READ) {};
	~MaxValAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_MaxVal(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_MaxVal_allowed(ty);}
};

//	Attribute CountMaxVal class definition
class CountMaxValAttrib: public Tango::Attr
{
public:
	CountMaxValAttrib():Attr("CountMaxVal",
			Tango::DEV_LONG, Tango::READ) {};
	~CountMaxValAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_CountMaxVal(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_CountMaxVal_allowed(ty);}
};

//	Attribute HorSigma class definition
class HorSigmaAttrib: public Tango::Attr
{
public:
	HorSigmaAttrib():Attr("HorSigma",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~HorSigmaAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_HorSigma(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_HorSigma_allowed(ty);}
};

//	Attribute VerSigma class definition
class VerSigmaAttrib: public Tango::Attr
{
public:
	VerSigmaAttrib():Attr("VerSigma",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~VerSigmaAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_VerSigma(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_VerSigma_allowed(ty);}
};

//	Attribute Area class definition
class AreaAttrib: public Tango::Attr
{
public:
	AreaAttrib():Attr("Area",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~AreaAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Area(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Area_allowed(ty);}
};

//	Attribute HVCovar class definition
class HVCovarAttrib: public Tango::Attr
{
public:
	HVCovarAttrib():Attr("HVCovar",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~HVCovarAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_HVCovar(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_HVCovar_allowed(ty);}
};

//	Attribute CameraCounter class definition
class CameraCounterAttrib: public Tango::Attr
{
public:
	CameraCounterAttrib():Attr("CameraCounter",
			Tango::DEV_LONG, Tango::READ) {};
	~CameraCounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_CameraCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_CameraCounter_allowed(ty);}
};

//	Attribute AcquisitionCounter class definition
class AcquisitionCounterAttrib: public Tango::Attr
{
public:
	AcquisitionCounterAttrib():Attr("AcquisitionCounter",
			Tango::DEV_LONG, Tango::READ) {};
	~AcquisitionCounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_AcquisitionCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_AcquisitionCounter_allowed(ty);}
};

//	Attribute Height class definition
class HeightAttrib: public Tango::Attr
{
public:
	HeightAttrib():Attr("Height",
			Tango::DEV_LONG, Tango::READ) {};
	~HeightAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Height(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Height_allowed(ty);}
};

//	Attribute Width class definition
class WidthAttrib: public Tango::Attr
{
public:
	WidthAttrib():Attr("Width",
			Tango::DEV_LONG, Tango::READ) {};
	~WidthAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Width(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Width_allowed(ty);}
};

//	Attribute ProcessingTime class definition
class ProcessingTimeAttrib: public Tango::Attr
{
public:
	ProcessingTimeAttrib():Attr("ProcessingTime",
			Tango::DEV_LONG, Tango::READ) {};
	~ProcessingTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ProcessingTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ProcessingTime_allowed(ty);}
};

//	Attribute Frequency class definition
class FrequencyAttrib: public Tango::Attr
{
public:
	FrequencyAttrib():Attr("Frequency",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~FrequencyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Frequency(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Frequency_allowed(ty);}
};

//	Attribute Trigger class definition
class TriggerAttrib: public Tango::Attr
{
public:
	TriggerAttrib():Attr("Trigger",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~TriggerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Trigger(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_Trigger(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Trigger_allowed(ty);}
};

//	Attribute Exposure class definition
class ExposureAttrib: public Tango::Attr
{
public:
	ExposureAttrib():Attr("Exposure",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ExposureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Exposure(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_Exposure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Exposure_allowed(ty);}
};

//	Attribute Gain class definition
class GainAttrib: public Tango::Attr
{
public:
	GainAttrib():Attr("Gain",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~GainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Gain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_Gain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Gain_allowed(ty);}
};

//	Attribute RoiThreshold class definition
class RoiThresholdAttrib: public Tango::Attr
{
public:
	RoiThresholdAttrib():Attr("RoiThreshold",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~RoiThresholdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_RoiThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_RoiThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_RoiThreshold_allowed(ty);}
};

//	Attribute AutoRoi class definition
class AutoRoiAttrib: public Tango::Attr
{
public:
	AutoRoiAttrib():Attr("AutoRoi",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~AutoRoiAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_AutoRoi(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_AutoRoi(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_AutoRoi_allowed(ty);}
};

//	Attribute SwRoi class definition
class SwRoiAttrib: public Tango::Attr
{
public:
	SwRoiAttrib():Attr("SwRoi",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~SwRoiAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_SwRoi(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_SwRoi(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_SwRoi_allowed(ty);}
};

//	Attribute HwRoi class definition
class HwRoiAttrib: public Tango::Attr
{
public:
	HwRoiAttrib():Attr("HwRoi",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~HwRoiAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_HwRoi(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_HwRoi(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_HwRoi_allowed(ty);}
};

//	Attribute PlotMode class definition
class PlotModeAttrib: public Tango::Attr
{
public:
	PlotModeAttrib():Attr("PlotMode",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~PlotModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_PlotMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_PlotMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_PlotMode_allowed(ty);}
};

//	Attribute IconSize class definition
class IconSizeAttrib: public Tango::Attr
{
public:
	IconSizeAttrib():Attr("IconSize",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~IconSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_IconSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_IconSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_IconSize_allowed(ty);}
};

//	Attribute LowPassOrder class definition
class LowPassOrderAttrib: public Tango::Attr
{
public:
	LowPassOrderAttrib():Attr("LowPassOrder",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~LowPassOrderAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_LowPassOrder(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_LowPassOrder(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_LowPassOrder_allowed(ty);}
};

//	Attribute Rotation class definition
class RotationAttrib: public Tango::Attr
{
public:
	RotationAttrib():Attr("Rotation",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~RotationAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Rotation(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_Rotation(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Rotation_allowed(ty);}
};

//	Attribute Mirror class definition
class MirrorAttrib: public Tango::Attr
{
public:
	MirrorAttrib():Attr("Mirror",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~MirrorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Mirror(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_Mirror(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Mirror_allowed(ty);}
};

//	Attribute ImageDepth class definition
class ImageDepthAttrib: public Tango::Attr
{
public:
	ImageDepthAttrib():Attr("ImageDepth",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~ImageDepthAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ImageDepth(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ImageDepth(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ImageDepth_allowed(ty);}
};

//	Attribute BackgroundSubtraction class definition
class BackgroundSubtractionAttrib: public Tango::Attr
{
public:
	BackgroundSubtractionAttrib():Attr("BackgroundSubtraction",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~BackgroundSubtractionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_BackgroundSubtraction(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_BackgroundSubtraction(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_BackgroundSubtraction_allowed(ty);}
};

//	Attribute EnableProcessing class definition
class EnableProcessingAttrib: public Tango::Attr
{
public:
	EnableProcessingAttrib():Attr("EnableProcessing",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~EnableProcessingAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_EnableProcessing(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_EnableProcessing(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_EnableProcessing_allowed(ty);}
};

//	Attribute FastProcessing class definition
class FastProcessingAttrib: public Tango::Attr
{
public:
	FastProcessingAttrib():Attr("FastProcessing",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~FastProcessingAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_FastProcessing(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_FastProcessing(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_FastProcessing_allowed(ty);}
};

//	Attribute Saturation class definition
class SaturationAttrib: public Tango::Attr
{
public:
	SaturationAttrib():Attr("Saturation",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~SaturationAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Saturation(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Saturation_allowed(ty);}
};

//	Attribute PlotLevel class definition
class PlotLevelAttrib: public Tango::Attr
{
public:
	PlotLevelAttrib():Attr("PlotLevel",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~PlotLevelAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_PlotLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_PlotLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_PlotLevel_allowed(ty);}
};

//	Attribute Pause class definition
class PauseAttrib: public Tango::Attr
{
public:
	PauseAttrib():Attr("Pause",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~PauseAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Pause(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_Pause(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Pause_allowed(ty);}
};

//	Attribute Label class definition
class LabelAttrib: public Tango::Attr
{
public:
	LabelAttrib():Attr("Label",
			Tango::DEV_STRING, Tango::READ) {};
	~LabelAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Label(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Label_allowed(ty);}
};

//	Attribute HorPosRelative class definition
class HorPosRelativeAttrib: public Tango::Attr
{
public:
	HorPosRelativeAttrib():Attr("HorPosRelative",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~HorPosRelativeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_HorPosRelative(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_HorPosRelative_allowed(ty);}
};

//	Attribute VerPosRelative class definition
class VerPosRelativeAttrib: public Tango::Attr
{
public:
	VerPosRelativeAttrib():Attr("VerPosRelative",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~VerPosRelativeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_VerPosRelative(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_VerPosRelative_allowed(ty);}
};

//	Attribute Phase class definition
class PhaseAttrib: public Tango::Attr
{
public:
	PhaseAttrib():Attr("Phase",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~PhaseAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Phase(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Phase_allowed(ty);}
};

//	Attribute ScaleHor class definition
class ScaleHorAttrib: public Tango::Attr
{
public:
	ScaleHorAttrib():Attr("ScaleHor",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ScaleHorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ScaleHor(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ScaleHor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ScaleHor_allowed(ty);}
};

//	Attribute ScaleVer class definition
class ScaleVerAttrib: public Tango::Attr
{
public:
	ScaleVerAttrib():Attr("ScaleVer",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ScaleVerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ScaleVer(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ScaleVer(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ScaleVer_allowed(ty);}
};

//	Attribute OffsetHor class definition
class OffsetHorAttrib: public Tango::Attr
{
public:
	OffsetHorAttrib():Attr("OffsetHor",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~OffsetHorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_OffsetHor(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_OffsetHor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_OffsetHor_allowed(ty);}
};

//	Attribute OffsetVer class definition
class OffsetVerAttrib: public Tango::Attr
{
public:
	OffsetVerAttrib():Attr("OffsetVer",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~OffsetVerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_OffsetVer(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_OffsetVer(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_OffsetVer_allowed(ty);}
};

//	Attribute PlotOffsetAxis class definition
class PlotOffsetAxisAttrib: public Tango::Attr
{
public:
	PlotOffsetAxisAttrib():Attr("PlotOffsetAxis",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~PlotOffsetAxisAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_PlotOffsetAxis(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_PlotOffsetAxis(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_PlotOffsetAxis_allowed(ty);}
};

//	Attribute Intensity class definition
class IntensityAttrib: public Tango::Attr
{
public:
	IntensityAttrib():Attr("Intensity",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~IntensityAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Intensity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Intensity_allowed(ty);}
};

//	Attribute SignHor class definition
class SignHorAttrib: public Tango::Attr
{
public:
	SignHorAttrib():Attr("SignHor",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~SignHorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_SignHor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_SignHor_allowed(ty);}
};

//	Attribute SignVer class definition
class SignVerAttrib: public Tango::Attr
{
public:
	SignVerAttrib():Attr("SignVer",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~SignVerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_SignVer(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_SignVer_allowed(ty);}
};

//	Attribute ProcessMode class definition
class ProcessModeAttrib: public Tango::Attr
{
public:
	ProcessModeAttrib():Attr("ProcessMode",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ProcessModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ProcessMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ProcessMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ProcessMode_allowed(ty);}
};

//	Attribute DebugThread class definition
class DebugThreadAttrib: public Tango::Attr
{
public:
	DebugThreadAttrib():Attr("DebugThread",
			Tango::DEV_LONG, Tango::READ) {};
	~DebugThreadAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_DebugThread(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_DebugThread_allowed(ty);}
};

//	Attribute BlackLevel class definition
class BlackLevelAttrib: public Tango::Attr
{
public:
	BlackLevelAttrib():Attr("BlackLevel",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~BlackLevelAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_BlackLevel(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_BlackLevel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_BlackLevel_allowed(ty);}
};

//	Attribute ImageBufferSize class definition
class ImageBufferSizeAttrib: public Tango::Attr
{
public:
	ImageBufferSizeAttrib():Attr("ImageBufferSize",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ImageBufferSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ImageBufferSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ImageBufferSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ImageBufferSize_allowed(ty);}
};

//	Attribute ImageAcquisitionCounter class definition
class ImageAcquisitionCounterAttrib: public Tango::Attr
{
public:
	ImageAcquisitionCounterAttrib():Attr("ImageAcquisitionCounter",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ImageAcquisitionCounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ImageAcquisitionCounter(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ImageAcquisitionCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ImageAcquisitionCounter_allowed(ty);}
};

//	Attribute ExposureAutoEnable class definition
class ExposureAutoEnableAttrib: public Tango::Attr
{
public:
	ExposureAutoEnableAttrib():Attr("ExposureAutoEnable",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~ExposureAutoEnableAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ExposureAutoEnable(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ExposureAutoEnable(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ExposureAutoEnable_allowed(ty);}
};

//	Attribute ExposureAutoMin class definition
class ExposureAutoMinAttrib: public Tango::Attr
{
public:
	ExposureAutoMinAttrib():Attr("ExposureAutoMin",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ExposureAutoMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ExposureAutoMin(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ExposureAutoMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ExposureAutoMin_allowed(ty);}
};

//	Attribute ExposureAutoMax class definition
class ExposureAutoMaxAttrib: public Tango::Attr
{
public:
	ExposureAutoMaxAttrib():Attr("ExposureAutoMax",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ExposureAutoMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ExposureAutoMax(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ExposureAutoMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ExposureAutoMax_allowed(ty);}
};

//	Attribute GainAutoEnable class definition
class GainAutoEnableAttrib: public Tango::Attr
{
public:
	GainAutoEnableAttrib():Attr("GainAutoEnable",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~GainAutoEnableAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_GainAutoEnable(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_GainAutoEnable(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_GainAutoEnable_allowed(ty);}
};

//	Attribute GainAutoMin class definition
class GainAutoMinAttrib: public Tango::Attr
{
public:
	GainAutoMinAttrib():Attr("GainAutoMin",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~GainAutoMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_GainAutoMin(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_GainAutoMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_GainAutoMin_allowed(ty);}
};

//	Attribute GainAutoMax class definition
class GainAutoMaxAttrib: public Tango::Attr
{
public:
	GainAutoMaxAttrib():Attr("GainAutoMax",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~GainAutoMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_GainAutoMax(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_GainAutoMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_GainAutoMax_allowed(ty);}
};

//	Attribute AutoTargetValue class definition
class AutoTargetValueAttrib: public Tango::Attr
{
public:
	AutoTargetValueAttrib():Attr("AutoTargetValue",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~AutoTargetValueAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_AutoTargetValue(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_AutoTargetValue(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_AutoTargetValue_allowed(ty);}
};

//	Attribute AutoFeedbackGain class definition
class AutoFeedbackGainAttrib: public Tango::Attr
{
public:
	AutoFeedbackGainAttrib():Attr("AutoFeedbackGain",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~AutoFeedbackGainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_AutoFeedbackGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_AutoFeedbackGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_AutoFeedbackGain_allowed(ty);}
};

//	Attribute AutoFeedbackDws class definition
class AutoFeedbackDwsAttrib: public Tango::Attr
{
public:
	AutoFeedbackDwsAttrib():Attr("AutoFeedbackDws",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~AutoFeedbackDwsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_AutoFeedbackDws(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_AutoFeedbackDws(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_AutoFeedbackDws_allowed(ty);}
};

//	Attribute AutoFeedbackTargetThres class definition
class AutoFeedbackTargetThresAttrib: public Tango::Attr
{
public:
	AutoFeedbackTargetThresAttrib():Attr("AutoFeedbackTargetThres",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~AutoFeedbackTargetThresAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_AutoFeedbackTargetThres(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_AutoFeedbackTargetThres(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_AutoFeedbackTargetThres_allowed(ty);}
};

//	Attribute AutoFeedbackDeadBand class definition
class AutoFeedbackDeadBandAttrib: public Tango::Attr
{
public:
	AutoFeedbackDeadBandAttrib():Attr("AutoFeedbackDeadBand",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~AutoFeedbackDeadBandAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_AutoFeedbackDeadBand(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_AutoFeedbackDeadBand(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_AutoFeedbackDeadBand_allowed(ty);}
};

//	Attribute FitError class definition
class FitErrorAttrib: public Tango::Attr
{
public:
	FitErrorAttrib():Attr("FitError",
			Tango::DEV_LONG, Tango::READ) {};
	~FitErrorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_FitError(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_FitError_allowed(ty);}
};

//	Attribute BunchNumber class definition
class BunchNumberAttrib: public Tango::Attr
{
public:
	BunchNumberAttrib():Attr("BunchNumber",
			Tango::DEV_LONG, Tango::READ) {};
	~BunchNumberAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_BunchNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_BunchNumber_allowed(ty);}
};

//	Attribute MeanIntensityThreshold class definition
class MeanIntensityThresholdAttrib: public Tango::Attr
{
public:
	MeanIntensityThresholdAttrib():Attr("MeanIntensityThreshold",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~MeanIntensityThresholdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_MeanIntensityThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_MeanIntensityThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_MeanIntensityThreshold_allowed(ty);}
};

//	Attribute Binning class definition
class BinningAttrib: public Tango::Attr
{
public:
	BinningAttrib():Attr("Binning",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~BinningAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Binning(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_Binning(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Binning_allowed(ty);}
};

//	Attribute DISEnable class definition
class DISEnableAttrib: public Tango::Attr
{
public:
	DISEnableAttrib():Attr("DISEnable",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~DISEnableAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_DISEnable(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_DISEnable(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_DISEnable_allowed(ty);}
};

//	Attribute DisableTriggerTimeout class definition
class DisableTriggerTimeoutAttrib: public Tango::Attr
{
public:
	DisableTriggerTimeoutAttrib():Attr("DisableTriggerTimeout",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~DisableTriggerTimeoutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_DisableTriggerTimeout(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_DisableTriggerTimeout(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_DisableTriggerTimeout_allowed(ty);}
};

//	Attribute ImageSumSamples class definition
class ImageSumSamplesAttrib: public Tango::Attr
{
public:
	ImageSumSamplesAttrib():Attr("ImageSumSamples",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ImageSumSamplesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ImageSumSamples(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_ImageSumSamples(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ImageSumSamples_allowed(ty);}
};

//	Attribute Model class definition
class ModelAttrib: public Tango::Attr
{
public:
	ModelAttrib():Attr("Model",
			Tango::DEV_STRING, Tango::READ) {};
	~ModelAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Model(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Model_allowed(ty);}
};

//	Attribute FeedbackMode class definition
class FeedbackModeAttrib: public Tango::Attr
{
public:
	FeedbackModeAttrib():Attr("FeedbackMode",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~FeedbackModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_FeedbackMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_FeedbackMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_FeedbackMode_allowed(ty);}
};

//	Attribute MeanIntensity class definition
class MeanIntensityAttrib: public Tango::Attr
{
public:
	MeanIntensityAttrib():Attr("MeanIntensity",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~MeanIntensityAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_MeanIntensity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_MeanIntensity_allowed(ty);}
};

//	Attribute FeedbackError class definition
class FeedbackErrorAttrib: public Tango::Attr
{
public:
	FeedbackErrorAttrib():Attr("FeedbackError",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~FeedbackErrorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_FeedbackError(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_FeedbackError_allowed(ty);}
};

//	Attribute SearchBackgroundParam class definition
class SearchBackgroundParamAttrib: public Tango::SpectrumAttr
{
public:
	SearchBackgroundParamAttrib():SpectrumAttr("SearchBackgroundParam",
			Tango::DEV_DOUBLE, Tango::READ_WRITE, 2) {};
	~SearchBackgroundParamAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_SearchBackgroundParam(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_SearchBackgroundParam(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_SearchBackgroundParam_allowed(ty);}
};

//	Attribute HorProfile class definition
class HorProfileAttrib: public Tango::SpectrumAttr
{
public:
	HorProfileAttrib():SpectrumAttr("HorProfile",
			Tango::DEV_DOUBLE, Tango::READ, 3000) {};
	~HorProfileAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_HorProfile(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_HorProfile_allowed(ty);}
};

//	Attribute VerProfile class definition
class VerProfileAttrib: public Tango::SpectrumAttr
{
public:
	VerProfileAttrib():SpectrumAttr("VerProfile",
			Tango::DEV_DOUBLE, Tango::READ, 3000) {};
	~VerProfileAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_VerProfile(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_VerProfile_allowed(ty);}
};

//	Attribute ErrorCounters class definition
class ErrorCountersAttrib: public Tango::SpectrumAttr
{
public:
	ErrorCountersAttrib():SpectrumAttr("ErrorCounters",
			Tango::DEV_LONG, Tango::READ, 10) {};
	~ErrorCountersAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ErrorCounters(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ErrorCounters_allowed(ty);}
};

//	Attribute TimeStamp class definition
class TimeStampAttrib: public Tango::SpectrumAttr
{
public:
	TimeStampAttrib():SpectrumAttr("TimeStamp",
			Tango::DEV_LONG, Tango::READ, 2) {};
	~TimeStampAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_TimeStamp(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_TimeStamp_allowed(ty);}
};

//	Attribute AutoRoiParam class definition
class AutoRoiParamAttrib: public Tango::SpectrumAttr
{
public:
	AutoRoiParamAttrib():SpectrumAttr("AutoRoiParam",
			Tango::DEV_LONG, Tango::READ, 4) {};
	~AutoRoiParamAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_AutoRoiParam(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_AutoRoiParam_allowed(ty);}
};

//	Attribute RoiParam class definition
class RoiParamAttrib: public Tango::SpectrumAttr
{
public:
	RoiParamAttrib():SpectrumAttr("RoiParam",
			Tango::DEV_LONG, Tango::READ_WRITE, 4) {};
	~RoiParamAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_RoiParam(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_RoiParam(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_RoiParam_allowed(ty);}
};

//	Attribute HorFitProfile class definition
class HorFitProfileAttrib: public Tango::SpectrumAttr
{
public:
	HorFitProfileAttrib():SpectrumAttr("HorFitProfile",
			Tango::DEV_DOUBLE, Tango::READ, 3000) {};
	~HorFitProfileAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_HorFitProfile(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_HorFitProfile_allowed(ty);}
};

//	Attribute VerFitProfile class definition
class VerFitProfileAttrib: public Tango::SpectrumAttr
{
public:
	VerFitProfileAttrib():SpectrumAttr("VerFitProfile",
			Tango::DEV_DOUBLE, Tango::READ, 3000) {};
	~VerFitProfileAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_VerFitProfile(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_VerFitProfile_allowed(ty);}
};

//	Attribute HwRoiParam class definition
class HwRoiParamAttrib: public Tango::SpectrumAttr
{
public:
	HwRoiParamAttrib():SpectrumAttr("HwRoiParam",
			Tango::DEV_LONG, Tango::READ_WRITE, 4) {};
	~HwRoiParamAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_HwRoiParam(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<GigeCam *>(dev))->write_HwRoiParam(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_HwRoiParam_allowed(ty);}
};

//	Attribute Image8 class definition
class Image8Attrib: public Tango::ImageAttr
{
public:
	Image8Attrib():ImageAttr("Image8",
			Tango::DEV_UCHAR, Tango::READ, 3000, 3000) {};
	~Image8Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Image8(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Image8_allowed(ty);}
};

//	Attribute Image8Icon class definition
class Image8IconAttrib: public Tango::ImageAttr
{
public:
	Image8IconAttrib():ImageAttr("Image8Icon",
			Tango::DEV_LONG, Tango::READ, 400, 400) {};
	~Image8IconAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Image8Icon(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Image8Icon_allowed(ty);}
};

//	Attribute Image16 class definition
class Image16Attrib: public Tango::ImageAttr
{
public:
	Image16Attrib():ImageAttr("Image16",
			Tango::DEV_USHORT, Tango::READ, 3000, 3000) {};
	~Image16Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Image16(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Image16_allowed(ty);}
};

//	Attribute Image16Icon class definition
class Image16IconAttrib: public Tango::ImageAttr
{
public:
	Image16IconAttrib():ImageAttr("Image16Icon",
			Tango::DEV_LONG, Tango::READ, 400, 400) {};
	~Image16IconAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Image16Icon(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Image16Icon_allowed(ty);}
};

//	Attribute Image8Counter class definition
class Image8CounterAttrib: public Tango::ImageAttr
{
public:
	Image8CounterAttrib():ImageAttr("Image8Counter",
			Tango::DEV_UCHAR, Tango::READ, 3000, 3000) {};
	~Image8CounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Image8Counter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Image8Counter_allowed(ty);}
};

//	Attribute Image16Counter class definition
class Image16CounterAttrib: public Tango::ImageAttr
{
public:
	Image16CounterAttrib():ImageAttr("Image16Counter",
			Tango::DEV_USHORT, Tango::READ, 3000, 3000) {};
	~Image16CounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_Image16Counter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_Image16Counter_allowed(ty);}
};

//	Attribute ImageSum class definition
class ImageSumAttrib: public Tango::ImageAttr
{
public:
	ImageSumAttrib():ImageAttr("ImageSum",
			Tango::DEV_LONG, Tango::READ, 3000, 3000) {};
	~ImageSumAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<GigeCam *>(dev))->read_ImageSum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<GigeCam *>(dev))->is_ImageSum_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Start class definition
class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_Start_allowed(any);}
};

//	Command Stop class definition
class StopClass : public Tango::Command
{
public:
	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_Stop_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_Reset_allowed(any);}
};

//	Command ListCamera class definition
class ListCameraClass : public Tango::Command
{
public:
	ListCameraClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ListCameraClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ListCameraClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_ListCamera_allowed(any);}
};

//	Command AcquireBackground class definition
class AcquireBackgroundClass : public Tango::Command
{
public:
	AcquireBackgroundClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AcquireBackgroundClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AcquireBackgroundClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_AcquireBackground_allowed(any);}
};

//	Command GetImage8 class definition
class GetImage8Class : public Tango::Command
{
public:
	GetImage8Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetImage8Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetImage8Class() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetImage8_allowed(any);}
};

//	Command GetImage16 class definition
class GetImage16Class : public Tango::Command
{
public:
	GetImage16Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetImage16Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetImage16Class() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetImage16_allowed(any);}
};

//	Command GetHorPos class definition
class GetHorPosClass : public Tango::Command
{
public:
	GetHorPosClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetHorPosClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetHorPosClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetHorPos_allowed(any);}
};

//	Command GetVerPos class definition
class GetVerPosClass : public Tango::Command
{
public:
	GetVerPosClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetVerPosClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetVerPosClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetVerPos_allowed(any);}
};

//	Command GetHorSigma class definition
class GetHorSigmaClass : public Tango::Command
{
public:
	GetHorSigmaClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetHorSigmaClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetHorSigmaClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetHorSigma_allowed(any);}
};

//	Command GetVerSigma class definition
class GetVerSigmaClass : public Tango::Command
{
public:
	GetVerSigmaClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetVerSigmaClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetVerSigmaClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetVerSigma_allowed(any);}
};

//	Command GetArea class definition
class GetAreaClass : public Tango::Command
{
public:
	GetAreaClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetAreaClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetAreaClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetArea_allowed(any);}
};

//	Command GetAcquisitionCounter class definition
class GetAcquisitionCounterClass : public Tango::Command
{
public:
	GetAcquisitionCounterClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetAcquisitionCounterClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetAcquisitionCounterClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetAcquisitionCounter_allowed(any);}
};

//	Command GetSaturation class definition
class GetSaturationClass : public Tango::Command
{
public:
	GetSaturationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetSaturationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetSaturationClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetSaturation_allowed(any);}
};

//	Command SetReference class definition
class SetReferenceClass : public Tango::Command
{
public:
	SetReferenceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetReferenceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetReferenceClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_SetReference_allowed(any);}
};

//	Command GetPhase class definition
class GetPhaseClass : public Tango::Command
{
public:
	GetPhaseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetPhaseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetPhaseClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetPhase_allowed(any);}
};

//	Command SaveScale class definition
class SaveScaleClass : public Tango::Command
{
public:
	SaveScaleClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveScaleClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveScaleClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_SaveScale_allowed(any);}
};

//	Command RestoreScale class definition
class RestoreScaleClass : public Tango::Command
{
public:
	RestoreScaleClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RestoreScaleClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RestoreScaleClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_RestoreScale_allowed(any);}
};

//	Command SetMeasurePoint class definition
class SetMeasurePointClass : public Tango::Command
{
public:
	SetMeasurePointClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetMeasurePointClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetMeasurePointClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_SetMeasurePoint_allowed(any);}
};

//	Command ClearMeasurePoints class definition
class ClearMeasurePointsClass : public Tango::Command
{
public:
	ClearMeasurePointsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearMeasurePointsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearMeasurePointsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_ClearMeasurePoints_allowed(any);}
};

//	Command GetIntensity class definition
class GetIntensityClass : public Tango::Command
{
public:
	GetIntensityClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetIntensityClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetIntensityClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetIntensity_allowed(any);}
};

//	Command GetHorProfile class definition
class GetHorProfileClass : public Tango::Command
{
public:
	GetHorProfileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetHorProfileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetHorProfileClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetHorProfile_allowed(any);}
};

//	Command GetVerProfile class definition
class GetVerProfileClass : public Tango::Command
{
public:
	GetVerProfileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetVerProfileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetVerProfileClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetVerProfile_allowed(any);}
};

//	Command GetHorFitProfile class definition
class GetHorFitProfileClass : public Tango::Command
{
public:
	GetHorFitProfileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetHorFitProfileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetHorFitProfileClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetHorFitProfile_allowed(any);}
};

//	Command GetVerFitProfile class definition
class GetVerFitProfileClass : public Tango::Command
{
public:
	GetVerFitProfileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetVerFitProfileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetVerFitProfileClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetVerFitProfile_allowed(any);}
};

//	Command SaveParam class definition
class SaveParamClass : public Tango::Command
{
public:
	SaveParamClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveParamClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveParamClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_SaveParam_allowed(any);}
};

//	Command ClearReference class definition
class ClearReferenceClass : public Tango::Command
{
public:
	ClearReferenceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearReferenceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearReferenceClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_ClearReference_allowed(any);}
};

//	Command ExposureAutoOnce class definition
class ExposureAutoOnceClass : public Tango::Command
{
public:
	ExposureAutoOnceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ExposureAutoOnceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ExposureAutoOnceClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_ExposureAutoOnce_allowed(any);}
};

//	Command GainAutoOnce class definition
class GainAutoOnceClass : public Tango::Command
{
public:
	GainAutoOnceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GainAutoOnceClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GainAutoOnceClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GainAutoOnce_allowed(any);}
};

//	Command GetFitError class definition
class GetFitErrorClass : public Tango::Command
{
public:
	GetFitErrorClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetFitErrorClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetFitErrorClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetFitError_allowed(any);}
};

//	Command GetBunchNumber class definition
class GetBunchNumberClass : public Tango::Command
{
public:
	GetBunchNumberClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetBunchNumberClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetBunchNumberClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetBunchNumber_allowed(any);}
};

//	Command GetMaxVal class definition
class GetMaxValClass : public Tango::Command
{
public:
	GetMaxValClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetMaxValClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetMaxValClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetMaxVal_allowed(any);}
};

//	Command GetGain class definition
class GetGainClass : public Tango::Command
{
public:
	GetGainClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetGainClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetGainClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetGain_allowed(any);}
};

//	Command GetExposure class definition
class GetExposureClass : public Tango::Command
{
public:
	GetExposureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetExposureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetExposureClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GigeCam *>(dev))->is_GetExposure_allowed(any);}
};


/**
 *	The GigeCamClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  GigeCamClass : public Tango::DeviceClass
#else
class GigeCamClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(GigeCamClass::Additionnal DServer data members) ENABLED START -----*/
public:
	

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static GigeCamClass *init(const char *);
		static GigeCamClass *instance();
		~GigeCamClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		GigeCamClass(string &);
		static GigeCamClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	GigeCam_H
