/*----- PROTECTED REGION ID(GigeCamClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id: GigeCamClass.cpp,v 1.26 2018-10-03 13:55:16 giulio Exp $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source: /home/cvsadm/cvsroot/fermi/servers/gigecam/src/GigeCamClass.cpp,v $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        GigeCamClass.cpp
//
// description : C++ source for the GigeCamClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the �name� once per process.
//
// project :     Gigabit Camera Server.
//
// $Author: giulio $
//
// $Revision: 1.26 $
// $Date: 2018-10-03 13:55:16 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/gigecam/src/GigeCamClass.cpp,v $
// $Log: GigeCamClass.cpp,v $
// Revision 1.26  2018-10-03 13:55:16  giulio
// Allowing set scale/offset when ccd is off, bugfixing
//
// Revision 1.25  2017-04-19 07:00:53  giulio
// Fixed feedback mode
//
// Revision 1.24  2017-03-20 12:22:22  giulio
// Added aCA2000-50gm, added support for tango based trajectory feedback
//
// Revision 1.23  2014-12-30 08:33:57  giulio
// Added Model attribute
//
// Revision 1.22  2014-08-28 07:49:45  giulio
// Added imagesum attribute and scA1400 ccd
//
// Revision 1.21  2013-12-04 09:53:20  giulio
// Moved to Pylon3, added some eth tuning properties (band reservation, interpacket delay)
//
// Revision 1.20  2013-08-07 08:00:26  giulio
// Added mutexes in get_data commands; moved to Tango8; changed shutdown timeouts
//
// Revision 1.19  2013-07-09 08:34:16  giulio
// Added packet size configuration
//
// Revision 1.18  2013-05-29 12:49:17  giulio
// Implemented hwroiparam
//
// Revision 1.17  2013-05-17 13:14:08  giulio
// Added disable trigger timeout, stream grabber configurable
//
// Revision 1.16  2013-05-16 12:41:23  giulio
// Disable hw roi when image rotated, fix hor hw roi overflow
//
// Revision 1.15  2013-04-11 14:29:53  giulio
// Added digital image stabilization, saved roi_threshold
//
// Revision 1.14  2013-02-08 15:12:34  giulio
// Added autoreconnect disable + avA1000 ccd
//
// Revision 1.13  2013-01-24 08:47:29  giulio
// Added binning
//
// Revision 1.12  2012-09-17 12:23:42  giulio
// Autoexposure max to 3 sec, autogain max to 22dB
//
// Revision 1.11  2012-09-17 11:44:53  giulio
// Major updates (hw roi, auto gain/exposure, rnm..)
//
// Revision 1.10  2012-07-02 16:06:11  giulio
// Added saveparam command
//
// Revision 1.9  2012-01-30 12:47:01  giulio
// Added attributes for image transfer optimization
//
// Revision 1.8  2011-12-28 08:00:53  giulio
// Extended exposure timeout to its maximu value. Store all ccd parameters through SaveScale command
//
// Revision 1.7  2011/06/14 12:19:08  giulio
// Fixed GetImag16 bug
//
// Revision 1.6  2011/05/13 09:44:00  giulio
// Fixed some bugs, moved to tango7, supported Pylon 2.3.3
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <GigeCam.h>
#include <GigeCamClass.h>

/*----- PROTECTED REGION END -----*/	//	GigeCamClass.cpp

//-------------------------------------------------------------------
/**
 *	Create GigeCamClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_GigeCam_class(const char *name) {
		return GigeCam_ns::GigeCamClass::init(name);
	}
}

namespace GigeCam_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
GigeCamClass *GigeCamClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		GigeCamClass::GigeCamClass(string &s)
 * description : 	constructor for the GigeCamClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
GigeCamClass::GigeCamClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering GigeCamClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(GigeCamClass::constructor) ENABLED START -----*/
	
	string tagname(TagName);

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::constructor

	cout2 << "Leaving GigeCamClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		GigeCamClass::~GigeCamClass()
 * description : 	destructor for the GigeCamClass
 */
//--------------------------------------------------------
GigeCamClass::~GigeCamClass()
{
	/*----- PROTECTED REGION ID(GigeCamClass::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		GigeCamClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
GigeCamClass *GigeCamClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new GigeCamClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		GigeCamClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
GigeCamClass *GigeCamClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		StartClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "StartClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<GigeCam *>(device))->start(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StopClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->stop());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->reset());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ListCameraClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ListCameraClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ListCameraClass::execute(): arrived" << endl;
	return insert((static_cast<GigeCam *>(device))->list_camera());
}

//--------------------------------------------------------
/**
 * method : 		AcquireBackgroundClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AcquireBackgroundClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "AcquireBackgroundClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->acquire_background());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetImage8Class::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetImage8Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetImage8Class::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_image8(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetImage16Class::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetImage16Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetImage16Class::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_image16(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetHorPosClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetHorPosClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetHorPosClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_hor_pos(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetVerPosClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetVerPosClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetVerPosClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_ver_pos(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetHorSigmaClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetHorSigmaClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetHorSigmaClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_hor_sigma(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetVerSigmaClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetVerSigmaClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetVerSigmaClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_ver_sigma(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetAreaClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetAreaClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetAreaClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_area(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetAcquisitionCounterClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetAcquisitionCounterClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetAcquisitionCounterClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_acquisition_counter(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetSaturationClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetSaturationClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetSaturationClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_saturation(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetReferenceClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetReferenceClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetReferenceClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->set_reference());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetPhaseClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetPhaseClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetPhaseClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_phase(argin));
}

//--------------------------------------------------------
/**
 * method : 		SaveScaleClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SaveScaleClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SaveScaleClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->save_scale());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RestoreScaleClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RestoreScaleClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "RestoreScaleClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->restore_scale());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetMeasurePointClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetMeasurePointClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetMeasurePointClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	((static_cast<GigeCam *>(device))->set_measure_point(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ClearMeasurePointsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ClearMeasurePointsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ClearMeasurePointsClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->clear_measure_points());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetIntensityClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetIntensityClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetIntensityClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_intensity(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetHorProfileClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetHorProfileClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetHorProfileClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_hor_profile(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetVerProfileClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetVerProfileClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetVerProfileClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_ver_profile(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetHorFitProfileClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetHorFitProfileClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetHorFitProfileClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_hor_fit_profile(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetVerFitProfileClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetVerFitProfileClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetVerFitProfileClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_ver_fit_profile(argin));
}

//--------------------------------------------------------
/**
 * method : 		SaveParamClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SaveParamClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SaveParamClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->save_param());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ClearReferenceClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ClearReferenceClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ClearReferenceClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->clear_reference());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ExposureAutoOnceClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ExposureAutoOnceClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ExposureAutoOnceClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->exposure_auto_once());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GainAutoOnceClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GainAutoOnceClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GainAutoOnceClass::execute(): arrived" << endl;
	((static_cast<GigeCam *>(device))->gain_auto_once());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetFitErrorClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetFitErrorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetFitErrorClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_fit_error(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetBunchNumberClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetBunchNumberClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetBunchNumberClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_bunch_number(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetMaxValClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetMaxValClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetMaxValClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_max_val(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetGainClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetGainClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetGainClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_gain(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetExposureClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetExposureClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetExposureClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<GigeCam *>(device))->get_exposure(argin));
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum GigeCamClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum GigeCamClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum GigeCamClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void GigeCamClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "Configuration";
	prop_desc = "Table of configurations for the cameras that could be connected by this device.\nFormat is:\nlabel:ip address:offset_pos:gain_pos:img depth:exposure:gain:binning:updown:mirror:trigger mode:pixelXmm hor:pixelXmm ver: hor mech offset: ver mech offset\n\nFor example:\npil_camera_p1.1:192.168.1.10:10:0.01:8:10:350:1:0:0:1:15:10:0:0";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoRoi";
	prop_desc = "Enable autoroi (to minimize the area used for image processing";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoRoiParam";
	prop_desc = "Parameters for autoroi configuration algorithm.\nparam[0]=image decimation size (10 -> max image size)\nparam[1]=low pass filter (1-10)\nparam[2]=intensity threshold (0-10)";
	prop_def  = "50\n5\n1";
	vect_data.clear();
	vect_data.push_back("50");
	vect_data.push_back("5");
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ImageProcessing";
	prop_desc = "Enable image processing";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PlotMode";
	prop_desc = "Set plot mode:\nshort[0]=  0x1=plot axis & roi 0x2=plot spot contour 0x3=plot axis and spot contour\nshort[1]= plot color";
	prop_def  = "3\n0";
	vect_data.clear();
	vect_data.push_back("3");
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "FastCalculation";
	prop_desc = "Enable fast calculation algorithm.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ImageBufferSize";
	prop_desc = "Number of images stored in the circular buffer";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DataBufferSize";
	prop_desc = "Number of samples stored in the circular buffer for main parameters (horpos,verpos";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SearchBackgroundParam";
	prop_desc = "Search background parameters:\ndouble[0]=number of background levels\ndouble[1]=derivative factor";
	prop_def  = "20\n0.4";
	vect_data.clear();
	vect_data.push_back("20");
	vect_data.push_back("0.4");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RnmEnabled";
	prop_desc = "Enable rnm data support";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoConnect";
	prop_desc = "If true connect to a camera when the device starts. (There must be only one camera supported).";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RnmIndex";
	prop_desc = "Rnm index of camera";
	prop_def  = "-1";
	vect_data.clear();
	vect_data.push_back("-1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ProcessMode";
	prop_desc = "0=raw\n1=gaussian fit\n2=gaussian asymmetric\n4=confiteor";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RoiParam";
	prop_desc = "RoiParam";
	prop_def  = "RoiParam";
	vect_data.clear();
	vect_data.push_back("RoiParam");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SwRoi";
	prop_desc = "true=manual roi enabled, false=manual roi disabled";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "HwRoi";
	prop_desc = "";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RefPosOffset";
	prop_desc = "Target reference in mm (hor,ver)";
	prop_def  = "0\n0";
	vect_data.clear();
	vect_data.push_back("0");
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "GainAutoParam";
	prop_desc = "auto gain enable(1)/disable(0)\ngain min\ngain max";
	prop_def  = "0\n0\n22";
	vect_data.clear();
	vect_data.push_back("0");
	vect_data.push_back("0");
	vect_data.push_back("22");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ExposureAutoParam";
	prop_desc = "auto exposure enable(1)/disable(0)\nexposure min\nexposure max";
	prop_def  = "0\n100\n3000000";
	vect_data.clear();
	vect_data.push_back("0");
	vect_data.push_back("100");
	vect_data.push_back("3000000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "HwRoiParam";
	prop_desc = "Hardware ROI";
	prop_def  = "0\n0\n0\n0";
	vect_data.clear();
	vect_data.push_back("0");
	vect_data.push_back("0");
	vect_data.push_back("0");
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoTargetValue";
	prop_desc = "";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoFeedbackGain";
	prop_desc = "";
	prop_def  = "0.2";
	vect_data.clear();
	vect_data.push_back("0.2");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoFeedbackDws";
	prop_desc = "";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoFeedbackDeadband";
	prop_desc = "";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoFeedbackTargetThres";
	prop_desc = "";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Binning";
	prop_desc = "Binning";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AutoReconnect";
	prop_desc = "";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RoiThreshold";
	prop_desc = "";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StreamGrabberBuffer";
	prop_desc = "Number of streamgrabber buffers used by pylon library";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PacketSize";
	prop_desc = "Ethernet packet size";
	prop_def  = "1500";
	vect_data.clear();
	vect_data.push_back("1500");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "FitNumCores";
	prop_desc = "Number of cores used into fitting algorithm";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "InterPacketDelay";
	prop_desc = "Delay between packets in ticks (1 tick=8ns.)";
	prop_def  = "-1";
	vect_data.clear();
	vect_data.push_back("-1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ReserveBandwidth";
	prop_desc = "";
	prop_def  = "-1";
	vect_data.clear();
	vect_data.push_back("-1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void GigeCamClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Gigabit Camera Server");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("This server connects to a camera using an external thread. Inside this thread, images are acquired and stored");
	str_desc.push_back("in an array of objects that also do the image processing.");
	str_desc.push_back("Currently this server support Basler Gigabit cameras.");
	str_desc.push_back("To make the server work correctly, it is necessary to setup the ethernet interface with");
	str_desc.push_back("an mtu > 8000 and disable autonegotiation.");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void GigeCamClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(GigeCamClass::device_factory_before) ENABLED START -----*/

	//	Add your own code
	

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new GigeCam(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		GigeCam *dev = static_cast<GigeCam *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(GigeCamClass::device_factory_after) ENABLED START -----*/

	//	Add your own code
	

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void GigeCamClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(GigeCamClass::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::attribute_factory_before
	//	Attribute : HorPos
	HorPosAttrib	*horpos = new HorPosAttrib();
	Tango::UserDefaultAttrProp	horpos_prop;
	horpos_prop.set_description("Horizontal position of the spot int the image. (Measure)");
	horpos_prop.set_label("HorPos");
	horpos_prop.set_unit("mm");
	horpos_prop.set_standard_unit("mm");
	horpos_prop.set_display_unit("mm");
	horpos_prop.set_format("%.3f");
	//	max_value	not set for HorPos
	//	min_value	not set for HorPos
	//	max_alarm	not set for HorPos
	//	min_alarm	not set for HorPos
	//	max_warning	not set for HorPos
	//	min_warning	not set for HorPos
	//	delta_t	not set for HorPos
	//	delta_val	not set for HorPos
	
	horpos->set_default_properties(horpos_prop);
	//	Not Polled
	horpos->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(horpos);

	//	Attribute : VerPos
	VerPosAttrib	*verpos = new VerPosAttrib();
	Tango::UserDefaultAttrProp	verpos_prop;
	verpos_prop.set_description("Horizontal position of the spot int the image.(Measure)");
	verpos_prop.set_label("VerPos");
	verpos_prop.set_unit("mm");
	verpos_prop.set_standard_unit("mm");
	verpos_prop.set_display_unit("mm");
	verpos_prop.set_format("%.3f");
	//	max_value	not set for VerPos
	//	min_value	not set for VerPos
	//	max_alarm	not set for VerPos
	//	min_alarm	not set for VerPos
	//	max_warning	not set for VerPos
	//	min_warning	not set for VerPos
	//	delta_t	not set for VerPos
	//	delta_val	not set for VerPos
	
	verpos->set_default_properties(verpos_prop);
	//	Not Polled
	verpos->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(verpos);

	//	Attribute : MaxVal
	MaxValAttrib	*maxval = new MaxValAttrib();
	Tango::UserDefaultAttrProp	maxval_prop;
	maxval_prop.set_description("Maximum pixel value.(Measure)");
	//	label	not set for MaxVal
	//	unit	not set for MaxVal
	//	standard_unit	not set for MaxVal
	//	display_unit	not set for MaxVal
	//	format	not set for MaxVal
	//	max_value	not set for MaxVal
	//	min_value	not set for MaxVal
	//	max_alarm	not set for MaxVal
	//	min_alarm	not set for MaxVal
	//	max_warning	not set for MaxVal
	//	min_warning	not set for MaxVal
	//	delta_t	not set for MaxVal
	//	delta_val	not set for MaxVal
	
	maxval->set_default_properties(maxval_prop);
	//	Not Polled
	maxval->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(maxval);

	//	Attribute : CountMaxVal
	CountMaxValAttrib	*countmaxval = new CountMaxValAttrib();
	Tango::UserDefaultAttrProp	countmaxval_prop;
	countmaxval_prop.set_description("Number of pixels equal to the maximum pixel value (255/4095).(Measure)");
	//	label	not set for CountMaxVal
	//	unit	not set for CountMaxVal
	//	standard_unit	not set for CountMaxVal
	//	display_unit	not set for CountMaxVal
	//	format	not set for CountMaxVal
	//	max_value	not set for CountMaxVal
	//	min_value	not set for CountMaxVal
	//	max_alarm	not set for CountMaxVal
	//	min_alarm	not set for CountMaxVal
	//	max_warning	not set for CountMaxVal
	//	min_warning	not set for CountMaxVal
	//	delta_t	not set for CountMaxVal
	//	delta_val	not set for CountMaxVal
	
	countmaxval->set_default_properties(countmaxval_prop);
	//	Not Polled
	countmaxval->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(countmaxval);

	//	Attribute : HorSigma
	HorSigmaAttrib	*horsigma = new HorSigmaAttrib();
	Tango::UserDefaultAttrProp	horsigma_prop;
	horsigma_prop.set_description("Horizontal standard deviation of the spot in the image.(Measure)");
	horsigma_prop.set_label("HorSigma");
	horsigma_prop.set_unit("mm");
	horsigma_prop.set_standard_unit("mm");
	horsigma_prop.set_display_unit("mm");
	horsigma_prop.set_format("%.3f");
	//	max_value	not set for HorSigma
	//	min_value	not set for HorSigma
	//	max_alarm	not set for HorSigma
	//	min_alarm	not set for HorSigma
	//	max_warning	not set for HorSigma
	//	min_warning	not set for HorSigma
	//	delta_t	not set for HorSigma
	//	delta_val	not set for HorSigma
	
	horsigma->set_default_properties(horsigma_prop);
	//	Not Polled
	horsigma->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(horsigma);

	//	Attribute : VerSigma
	VerSigmaAttrib	*versigma = new VerSigmaAttrib();
	Tango::UserDefaultAttrProp	versigma_prop;
	versigma_prop.set_description("Vertical standard deviation of the spot in the image.(Measure)");
	versigma_prop.set_label("VerSigma");
	versigma_prop.set_unit("mm");
	versigma_prop.set_standard_unit("mm");
	versigma_prop.set_display_unit("mm");
	versigma_prop.set_format("%.3f");
	//	max_value	not set for VerSigma
	//	min_value	not set for VerSigma
	//	max_alarm	not set for VerSigma
	//	min_alarm	not set for VerSigma
	//	max_warning	not set for VerSigma
	//	min_warning	not set for VerSigma
	//	delta_t	not set for VerSigma
	//	delta_val	not set for VerSigma
	
	versigma->set_default_properties(versigma_prop);
	//	Not Polled
	versigma->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(versigma);

	//	Attribute : Area
	AreaAttrib	*area = new AreaAttrib();
	Tango::UserDefaultAttrProp	area_prop;
	area_prop.set_description("Area of the spot inside the roi.(Measure)");
	area_prop.set_label("Area");
	area_prop.set_unit("mm2");
	area_prop.set_standard_unit("mm2");
	area_prop.set_display_unit("mm2");
	area_prop.set_format("%.3f");
	//	max_value	not set for Area
	//	min_value	not set for Area
	//	max_alarm	not set for Area
	//	min_alarm	not set for Area
	//	max_warning	not set for Area
	//	min_warning	not set for Area
	//	delta_t	not set for Area
	//	delta_val	not set for Area
	
	area->set_default_properties(area_prop);
	//	Not Polled
	area->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(area);

	//	Attribute : HVCovar
	HVCovarAttrib	*hvcovar = new HVCovarAttrib();
	Tango::UserDefaultAttrProp	hvcovar_prop;
	hvcovar_prop.set_description("Covariance between horizontal and vertical plane.(Measure)");
	//	label	not set for HVCovar
	//	unit	not set for HVCovar
	//	standard_unit	not set for HVCovar
	//	display_unit	not set for HVCovar
	hvcovar_prop.set_format("%.2f");
	//	max_value	not set for HVCovar
	//	min_value	not set for HVCovar
	//	max_alarm	not set for HVCovar
	//	min_alarm	not set for HVCovar
	//	max_warning	not set for HVCovar
	//	min_warning	not set for HVCovar
	//	delta_t	not set for HVCovar
	//	delta_val	not set for HVCovar
	
	hvcovar->set_default_properties(hvcovar_prop);
	//	Not Polled
	hvcovar->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(hvcovar);

	//	Attribute : CameraCounter
	CameraCounterAttrib	*cameracounter = new CameraCounterAttrib();
	Tango::UserDefaultAttrProp	cameracounter_prop;
	cameracounter_prop.set_description("Camera counter (0-65535).(Connection Diagnostics)");
	//	label	not set for CameraCounter
	//	unit	not set for CameraCounter
	//	standard_unit	not set for CameraCounter
	//	display_unit	not set for CameraCounter
	cameracounter_prop.set_format("%d");
	//	max_value	not set for CameraCounter
	//	min_value	not set for CameraCounter
	//	max_alarm	not set for CameraCounter
	//	min_alarm	not set for CameraCounter
	//	max_warning	not set for CameraCounter
	//	min_warning	not set for CameraCounter
	//	delta_t	not set for CameraCounter
	//	delta_val	not set for CameraCounter
	
	cameracounter->set_default_properties(cameracounter_prop);
	//	Not Polled
	cameracounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(cameracounter);

	//	Attribute : AcquisitionCounter
	AcquisitionCounterAttrib	*acquisitioncounter = new AcquisitionCounterAttrib();
	Tango::UserDefaultAttrProp	acquisitioncounter_prop;
	acquisitioncounter_prop.set_description("Absolute acquisition image counter.(Connection Diagnostics)");
	//	label	not set for AcquisitionCounter
	//	unit	not set for AcquisitionCounter
	//	standard_unit	not set for AcquisitionCounter
	//	display_unit	not set for AcquisitionCounter
	acquisitioncounter_prop.set_format("%d");
	//	max_value	not set for AcquisitionCounter
	//	min_value	not set for AcquisitionCounter
	//	max_alarm	not set for AcquisitionCounter
	//	min_alarm	not set for AcquisitionCounter
	//	max_warning	not set for AcquisitionCounter
	//	min_warning	not set for AcquisitionCounter
	//	delta_t	not set for AcquisitionCounter
	//	delta_val	not set for AcquisitionCounter
	
	acquisitioncounter->set_default_properties(acquisitioncounter_prop);
	//	Not Polled
	acquisitioncounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(acquisitioncounter);

	//	Attribute : Height
	HeightAttrib	*height = new HeightAttrib();
	Tango::UserDefaultAttrProp	height_prop;
	height_prop.set_description("Image height");
	//	label	not set for Height
	height_prop.set_unit("px");
	height_prop.set_standard_unit("px");
	height_prop.set_display_unit("px");
	height_prop.set_format("%d");
	//	max_value	not set for Height
	//	min_value	not set for Height
	//	max_alarm	not set for Height
	//	min_alarm	not set for Height
	//	max_warning	not set for Height
	//	min_warning	not set for Height
	//	delta_t	not set for Height
	//	delta_val	not set for Height
	
	height->set_default_properties(height_prop);
	//	Not Polled
	height->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(height);

	//	Attribute : Width
	WidthAttrib	*width = new WidthAttrib();
	Tango::UserDefaultAttrProp	width_prop;
	width_prop.set_description("Image width");
	//	label	not set for Width
	width_prop.set_unit("px");
	width_prop.set_standard_unit("px");
	width_prop.set_display_unit("px");
	width_prop.set_format("%d");
	//	max_value	not set for Width
	//	min_value	not set for Width
	//	max_alarm	not set for Width
	//	min_alarm	not set for Width
	//	max_warning	not set for Width
	//	min_warning	not set for Width
	//	delta_t	not set for Width
	//	delta_val	not set for Width
	
	width->set_default_properties(width_prop);
	//	Not Polled
	width->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(width);

	//	Attribute : ProcessingTime
	ProcessingTimeAttrib	*processingtime = new ProcessingTimeAttrib();
	Tango::UserDefaultAttrProp	processingtime_prop;
	processingtime_prop.set_description("Processing time in us.(Processing Setup)");
	//	label	not set for ProcessingTime
	processingtime_prop.set_unit("us");
	processingtime_prop.set_standard_unit("us");
	processingtime_prop.set_display_unit("us");
	processingtime_prop.set_format("%d");
	//	max_value	not set for ProcessingTime
	//	min_value	not set for ProcessingTime
	//	max_alarm	not set for ProcessingTime
	//	min_alarm	not set for ProcessingTime
	//	max_warning	not set for ProcessingTime
	//	min_warning	not set for ProcessingTime
	//	delta_t	not set for ProcessingTime
	//	delta_val	not set for ProcessingTime
	
	processingtime->set_default_properties(processingtime_prop);
	//	Not Polled
	processingtime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(processingtime);

	//	Attribute : Frequency
	FrequencyAttrib	*frequency = new FrequencyAttrib();
	Tango::UserDefaultAttrProp	frequency_prop;
	frequency_prop.set_description("Frame rate in Hz. (Camera Setup)");
	frequency_prop.set_label("Frequency");
	frequency_prop.set_unit("Hz");
	frequency_prop.set_standard_unit("Hz");
	frequency_prop.set_display_unit("Hz");
	frequency_prop.set_format("%.1f");
	//	max_value	not set for Frequency
	//	min_value	not set for Frequency
	//	max_alarm	not set for Frequency
	//	min_alarm	not set for Frequency
	//	max_warning	not set for Frequency
	//	min_warning	not set for Frequency
	//	delta_t	not set for Frequency
	//	delta_val	not set for Frequency
	
	frequency->set_default_properties(frequency_prop);
	//	Not Polled
	frequency->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(frequency);

	//	Attribute : Trigger
	TriggerAttrib	*trigger = new TriggerAttrib();
	Tango::UserDefaultAttrProp	trigger_prop;
	trigger_prop.set_description("Trigger mode (Camera Setup)\nfalse = internal trigger (max frame rate)\ntrue = external trigger\nThe trigger will be on the rising edge of the pulse.");
	//	label	not set for Trigger
	//	unit	not set for Trigger
	//	standard_unit	not set for Trigger
	//	display_unit	not set for Trigger
	//	format	not set for Trigger
	//	max_value	not set for Trigger
	//	min_value	not set for Trigger
	//	max_alarm	not set for Trigger
	//	min_alarm	not set for Trigger
	//	max_warning	not set for Trigger
	//	min_warning	not set for Trigger
	//	delta_t	not set for Trigger
	//	delta_val	not set for Trigger
	
	trigger->set_default_properties(trigger_prop);
	//	Not Polled
	trigger->set_disp_level(Tango::OPERATOR);
	trigger->set_memorized();
	trigger->set_memorized_init(false);
	att_list.push_back(trigger);

	//	Attribute : Exposure
	ExposureAttrib	*exposure = new ExposureAttrib();
	Tango::UserDefaultAttrProp	exposure_prop;
	exposure_prop.set_description("Exposure time in us.(Camera Setup)");
	exposure_prop.set_label("Exposure");
	exposure_prop.set_unit("us");
	//	standard_unit	not set for Exposure
	exposure_prop.set_display_unit("us");
	exposure_prop.set_format("%d");
	exposure_prop.set_max_value("10000000");
	exposure_prop.set_min_value("24");
	//	max_alarm	not set for Exposure
	//	min_alarm	not set for Exposure
	//	max_warning	not set for Exposure
	//	min_warning	not set for Exposure
	//	delta_t	not set for Exposure
	//	delta_val	not set for Exposure
	
	exposure->set_default_properties(exposure_prop);
	//	Not Polled
	exposure->set_disp_level(Tango::OPERATOR);
	exposure->set_memorized();
	exposure->set_memorized_init(false);
	att_list.push_back(exposure);

	//	Attribute : Gain
	GainAttrib	*gain = new GainAttrib();
	Tango::UserDefaultAttrProp	gain_prop;
	gain_prop.set_description("Gain value in dB.");
	gain_prop.set_label("Gain");
	gain_prop.set_unit("dB");
	//	standard_unit	not set for Gain
	gain_prop.set_display_unit("dB");
	gain_prop.set_format("%.1f");
	gain_prop.set_max_value("99");
	gain_prop.set_min_value("0");
	//	max_alarm	not set for Gain
	//	min_alarm	not set for Gain
	//	max_warning	not set for Gain
	//	min_warning	not set for Gain
	//	delta_t	not set for Gain
	//	delta_val	not set for Gain
	
	gain->set_default_properties(gain_prop);
	//	Not Polled
	gain->set_disp_level(Tango::OPERATOR);
	gain->set_memorized();
	gain->set_memorized_init(false);
	att_list.push_back(gain);

	//	Attribute : RoiThreshold
	RoiThresholdAttrib	*roithreshold = new RoiThresholdAttrib();
	Tango::UserDefaultAttrProp	roithreshold_prop;
	roithreshold_prop.set_description("Scaling factor of the automatic roi threshold.\nAutomatic roi threshol is the background level that is automatically found by autoroi routine.(Processing Setup)");
	//	label	not set for RoiThreshold
	//	unit	not set for RoiThreshold
	//	standard_unit	not set for RoiThreshold
	//	display_unit	not set for RoiThreshold
	roithreshold_prop.set_format("%.3f");
	roithreshold_prop.set_max_value("100");
	roithreshold_prop.set_min_value("0");
	//	max_alarm	not set for RoiThreshold
	//	min_alarm	not set for RoiThreshold
	//	max_warning	not set for RoiThreshold
	//	min_warning	not set for RoiThreshold
	//	delta_t	not set for RoiThreshold
	//	delta_val	not set for RoiThreshold
	
	roithreshold->set_default_properties(roithreshold_prop);
	//	Not Polled
	roithreshold->set_disp_level(Tango::OPERATOR);
	roithreshold->set_memorized();
	roithreshold->set_memorized_init(false);
	att_list.push_back(roithreshold);

	//	Attribute : AutoRoi
	AutoRoiAttrib	*autoroi = new AutoRoiAttrib();
	Tango::UserDefaultAttrProp	autoroi_prop;
	autoroi_prop.set_description("Enable autoroi.\nAutoroi routine find the background level and the roi region where the spot is.\nWhen swroi is enabled also, the roi is the roi defined by the user by roiparam\nattribute but the background level is automatically calculated and taken into accout\nin position and standard deviation calculations.(Processing Setup)");
	//	label	not set for AutoRoi
	//	unit	not set for AutoRoi
	//	standard_unit	not set for AutoRoi
	//	display_unit	not set for AutoRoi
	//	format	not set for AutoRoi
	//	max_value	not set for AutoRoi
	//	min_value	not set for AutoRoi
	//	max_alarm	not set for AutoRoi
	//	min_alarm	not set for AutoRoi
	//	max_warning	not set for AutoRoi
	//	min_warning	not set for AutoRoi
	//	delta_t	not set for AutoRoi
	//	delta_val	not set for AutoRoi
	
	autoroi->set_default_properties(autoroi_prop);
	//	Not Polled
	autoroi->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(autoroi);

	//	Attribute : SwRoi
	SwRoiAttrib	*swroi = new SwRoiAttrib();
	Tango::UserDefaultAttrProp	swroi_prop;
	swroi_prop.set_description("Enable roi define by the user.(Display Options) ");
	//	label	not set for SwRoi
	//	unit	not set for SwRoi
	//	standard_unit	not set for SwRoi
	//	display_unit	not set for SwRoi
	//	format	not set for SwRoi
	//	max_value	not set for SwRoi
	//	min_value	not set for SwRoi
	//	max_alarm	not set for SwRoi
	//	min_alarm	not set for SwRoi
	//	max_warning	not set for SwRoi
	//	min_warning	not set for SwRoi
	//	delta_t	not set for SwRoi
	//	delta_val	not set for SwRoi
	
	swroi->set_default_properties(swroi_prop);
	//	Not Polled
	swroi->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(swroi);

	//	Attribute : HwRoi
	HwRoiAttrib	*hwroi = new HwRoiAttrib();
	Tango::UserDefaultAttrProp	hwroi_prop;
	//	description	not set for HwRoi
	//	label	not set for HwRoi
	//	unit	not set for HwRoi
	//	standard_unit	not set for HwRoi
	//	display_unit	not set for HwRoi
	//	format	not set for HwRoi
	//	max_value	not set for HwRoi
	//	min_value	not set for HwRoi
	//	max_alarm	not set for HwRoi
	//	min_alarm	not set for HwRoi
	//	max_warning	not set for HwRoi
	//	min_warning	not set for HwRoi
	//	delta_t	not set for HwRoi
	//	delta_val	not set for HwRoi
	
	hwroi->set_default_properties(hwroi_prop);
	//	Not Polled
	hwroi->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(hwroi);

	//	Attribute : PlotMode
	PlotModeAttrib	*plotmode = new PlotModeAttrib();
	Tango::UserDefaultAttrProp	plotmode_prop;
	plotmode_prop.set_description("Set plotting mode.(Display Options)\n0x0: plot nothing\n0x1:plot position axis and roi region\n0x2:plot spot region\n0x3: plot both");
	//	label	not set for PlotMode
	//	unit	not set for PlotMode
	//	standard_unit	not set for PlotMode
	//	display_unit	not set for PlotMode
	//	format	not set for PlotMode
	//	max_value	not set for PlotMode
	//	min_value	not set for PlotMode
	//	max_alarm	not set for PlotMode
	//	min_alarm	not set for PlotMode
	//	max_warning	not set for PlotMode
	//	min_warning	not set for PlotMode
	//	delta_t	not set for PlotMode
	//	delta_val	not set for PlotMode
	
	plotmode->set_default_properties(plotmode_prop);
	//	Not Polled
	plotmode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(plotmode);

	//	Attribute : IconSize
	IconSizeAttrib	*iconsize = new IconSizeAttrib();
	Tango::UserDefaultAttrProp	iconsize_prop;
	iconsize_prop.set_description("Horizontal size of the decimated image used to find automatically the roi.\n(Shadow Parameters)");
	//	label	not set for IconSize
	//	unit	not set for IconSize
	iconsize_prop.set_standard_unit("px");
	iconsize_prop.set_display_unit("px");
	iconsize_prop.set_format("%d");
	//	max_value	not set for IconSize
	//	min_value	not set for IconSize
	//	max_alarm	not set for IconSize
	//	min_alarm	not set for IconSize
	//	max_warning	not set for IconSize
	//	min_warning	not set for IconSize
	//	delta_t	not set for IconSize
	//	delta_val	not set for IconSize
	
	iconsize->set_default_properties(iconsize_prop);
	//	Not Polled
	iconsize->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(iconsize);

	//	Attribute : LowPassOrder
	LowPassOrderAttrib	*lowpassorder = new LowPassOrderAttrib();
	Tango::UserDefaultAttrProp	lowpassorder_prop;
	lowpassorder_prop.set_description("Low pass fiter order used to magnify the main spot on the camera.\n(Shadow Parameters)");
	//	label	not set for LowPassOrder
	//	unit	not set for LowPassOrder
	//	standard_unit	not set for LowPassOrder
	//	display_unit	not set for LowPassOrder
	//	format	not set for LowPassOrder
	//	max_value	not set for LowPassOrder
	//	min_value	not set for LowPassOrder
	//	max_alarm	not set for LowPassOrder
	//	min_alarm	not set for LowPassOrder
	//	max_warning	not set for LowPassOrder
	//	min_warning	not set for LowPassOrder
	//	delta_t	not set for LowPassOrder
	//	delta_val	not set for LowPassOrder
	
	lowpassorder->set_default_properties(lowpassorder_prop);
	//	Not Polled
	lowpassorder->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(lowpassorder);

	//	Attribute : Rotation
	RotationAttrib	*rotation = new RotationAttrib();
	Tango::UserDefaultAttrProp	rotation_prop;
	rotation_prop.set_description("Image rotation in degrees. (Display Options)");
	//	label	not set for Rotation
	rotation_prop.set_unit("deg");
	//	standard_unit	not set for Rotation
	rotation_prop.set_display_unit("deg");
	rotation_prop.set_format("%.1f");
	rotation_prop.set_max_value("360");
	rotation_prop.set_min_value("-360");
	//	max_alarm	not set for Rotation
	//	min_alarm	not set for Rotation
	//	max_warning	not set for Rotation
	//	min_warning	not set for Rotation
	//	delta_t	not set for Rotation
	//	delta_val	not set for Rotation
	
	rotation->set_default_properties(rotation_prop);
	//	Not Polled
	rotation->set_disp_level(Tango::OPERATOR);
	rotation->set_memorized();
	rotation->set_memorized_init(false);
	att_list.push_back(rotation);

	//	Attribute : Mirror
	MirrorAttrib	*mirror = new MirrorAttrib();
	Tango::UserDefaultAttrProp	mirror_prop;
	mirror_prop.set_description("Mirror the image (true) on the horizontal plane. (Display Options)");
	//	label	not set for Mirror
	//	unit	not set for Mirror
	//	standard_unit	not set for Mirror
	//	display_unit	not set for Mirror
	//	format	not set for Mirror
	//	max_value	not set for Mirror
	//	min_value	not set for Mirror
	//	max_alarm	not set for Mirror
	//	min_alarm	not set for Mirror
	//	max_warning	not set for Mirror
	//	min_warning	not set for Mirror
	//	delta_t	not set for Mirror
	//	delta_val	not set for Mirror
	
	mirror->set_default_properties(mirror_prop);
	//	Not Polled
	mirror->set_disp_level(Tango::OPERATOR);
	mirror->set_memorized();
	mirror->set_memorized_init(false);
	att_list.push_back(mirror);

	//	Attribute : ImageDepth
	ImageDepthAttrib	*imagedepth = new ImageDepthAttrib();
	Tango::UserDefaultAttrProp	imagedepth_prop;
	imagedepth_prop.set_description("Image depth. Valide values are 8 o 16.(Camera Setup)");
	//	label	not set for ImageDepth
	//	unit	not set for ImageDepth
	//	standard_unit	not set for ImageDepth
	//	display_unit	not set for ImageDepth
	//	format	not set for ImageDepth
	//	max_value	not set for ImageDepth
	//	min_value	not set for ImageDepth
	//	max_alarm	not set for ImageDepth
	//	min_alarm	not set for ImageDepth
	//	max_warning	not set for ImageDepth
	//	min_warning	not set for ImageDepth
	//	delta_t	not set for ImageDepth
	//	delta_val	not set for ImageDepth
	
	imagedepth->set_default_properties(imagedepth_prop);
	//	Not Polled
	imagedepth->set_disp_level(Tango::OPERATOR);
	imagedepth->set_memorized();
	imagedepth->set_memorized_init(false);
	att_list.push_back(imagedepth);

	//	Attribute : BackgroundSubtraction
	BackgroundSubtractionAttrib	*backgroundsubtraction = new BackgroundSubtractionAttrib();
	Tango::UserDefaultAttrProp	backgroundsubtraction_prop;
	backgroundsubtraction_prop.set_description("Enable (true) background subtraction. (Processing Setup)");
	//	label	not set for BackgroundSubtraction
	//	unit	not set for BackgroundSubtraction
	//	standard_unit	not set for BackgroundSubtraction
	//	display_unit	not set for BackgroundSubtraction
	//	format	not set for BackgroundSubtraction
	//	max_value	not set for BackgroundSubtraction
	//	min_value	not set for BackgroundSubtraction
	//	max_alarm	not set for BackgroundSubtraction
	//	min_alarm	not set for BackgroundSubtraction
	//	max_warning	not set for BackgroundSubtraction
	//	min_warning	not set for BackgroundSubtraction
	//	delta_t	not set for BackgroundSubtraction
	//	delta_val	not set for BackgroundSubtraction
	
	backgroundsubtraction->set_default_properties(backgroundsubtraction_prop);
	//	Not Polled
	backgroundsubtraction->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(backgroundsubtraction);

	//	Attribute : EnableProcessing
	EnableProcessingAttrib	*enableprocessing = new EnableProcessingAttrib();
	Tango::UserDefaultAttrProp	enableprocessing_prop;
	enableprocessing_prop.set_description("Enable (true) image processing.(Processing Setup)");
	//	label	not set for EnableProcessing
	//	unit	not set for EnableProcessing
	//	standard_unit	not set for EnableProcessing
	//	display_unit	not set for EnableProcessing
	//	format	not set for EnableProcessing
	//	max_value	not set for EnableProcessing
	//	min_value	not set for EnableProcessing
	//	max_alarm	not set for EnableProcessing
	//	min_alarm	not set for EnableProcessing
	//	max_warning	not set for EnableProcessing
	//	min_warning	not set for EnableProcessing
	//	delta_t	not set for EnableProcessing
	//	delta_val	not set for EnableProcessing
	
	enableprocessing->set_default_properties(enableprocessing_prop);
	//	Not Polled
	enableprocessing->set_disp_level(Tango::OPERATOR);
	enableprocessing->set_memorized();
	enableprocessing->set_memorized_init(false);
	att_list.push_back(enableprocessing);

	//	Attribute : FastProcessing
	FastProcessingAttrib	*fastprocessing = new FastProcessingAttrib();
	Tango::UserDefaultAttrProp	fastprocessing_prop;
	fastprocessing_prop.set_description("Enable fast processing.\nImage processing will be done automatically on a \ndecimate (binning) image to reduce computation time. (Processing Setup)");
	//	label	not set for FastProcessing
	//	unit	not set for FastProcessing
	//	standard_unit	not set for FastProcessing
	//	display_unit	not set for FastProcessing
	//	format	not set for FastProcessing
	//	max_value	not set for FastProcessing
	//	min_value	not set for FastProcessing
	//	max_alarm	not set for FastProcessing
	//	min_alarm	not set for FastProcessing
	//	max_warning	not set for FastProcessing
	//	min_warning	not set for FastProcessing
	//	delta_t	not set for FastProcessing
	//	delta_val	not set for FastProcessing
	
	fastprocessing->set_default_properties(fastprocessing_prop);
	//	Not Polled
	fastprocessing->set_disp_level(Tango::OPERATOR);
	fastprocessing->set_memorized();
	fastprocessing->set_memorized_init(false);
	att_list.push_back(fastprocessing);

	//	Attribute : Saturation
	SaturationAttrib	*saturation = new SaturationAttrib();
	Tango::UserDefaultAttrProp	saturation_prop;
	saturation_prop.set_description("Ratio between the number of the pixels that reached the\nmaximum value and the number of the pixels of the spot.(Measure)");
	//	label	not set for Saturation
	//	unit	not set for Saturation
	//	standard_unit	not set for Saturation
	//	display_unit	not set for Saturation
	saturation_prop.set_format("%.3f");
	saturation_prop.set_max_value("1");
	saturation_prop.set_min_value("0");
	//	max_alarm	not set for Saturation
	//	min_alarm	not set for Saturation
	//	max_warning	not set for Saturation
	//	min_warning	not set for Saturation
	//	delta_t	not set for Saturation
	//	delta_val	not set for Saturation
	
	saturation->set_default_properties(saturation_prop);
	//	Not Polled
	saturation->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(saturation);

	//	Attribute : PlotLevel
	PlotLevelAttrib	*plotlevel = new PlotLevelAttrib();
	Tango::UserDefaultAttrProp	plotlevel_prop;
	plotlevel_prop.set_description("Color of the plots (0-255 8bit) (0-4095 16bit).(Display Options)");
	//	label	not set for PlotLevel
	//	unit	not set for PlotLevel
	//	standard_unit	not set for PlotLevel
	//	display_unit	not set for PlotLevel
	plotlevel_prop.set_format("%d");
	//	max_value	not set for PlotLevel
	//	min_value	not set for PlotLevel
	//	max_alarm	not set for PlotLevel
	//	min_alarm	not set for PlotLevel
	//	max_warning	not set for PlotLevel
	//	min_warning	not set for PlotLevel
	//	delta_t	not set for PlotLevel
	//	delta_val	not set for PlotLevel
	
	plotlevel->set_default_properties(plotlevel_prop);
	//	Not Polled
	plotlevel->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(plotlevel);

	//	Attribute : Pause
	PauseAttrib	*pause = new PauseAttrib();
	Tango::UserDefaultAttrProp	pause_prop;
	pause_prop.set_description("Pause the image acquisition but don't give up the connection with the camera. (Camera Control)");
	//	label	not set for Pause
	//	unit	not set for Pause
	//	standard_unit	not set for Pause
	//	display_unit	not set for Pause
	//	format	not set for Pause
	//	max_value	not set for Pause
	//	min_value	not set for Pause
	//	max_alarm	not set for Pause
	//	min_alarm	not set for Pause
	//	max_warning	not set for Pause
	//	min_warning	not set for Pause
	//	delta_t	not set for Pause
	//	delta_val	not set for Pause
	
	pause->set_default_properties(pause_prop);
	//	Not Polled
	pause->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(pause);

	//	Attribute : Label
	LabelAttrib	*label = new LabelAttrib();
	Tango::UserDefaultAttrProp	label_prop;
	label_prop.set_description("Label of the camera currently acquired. It corresponds to the first element of the row\nof the table which contains the camera initialization paramenters.(Camera Control)\n");
	//	label	not set for Label
	//	unit	not set for Label
	//	standard_unit	not set for Label
	//	display_unit	not set for Label
	//	format	not set for Label
	//	max_value	not set for Label
	//	min_value	not set for Label
	//	max_alarm	not set for Label
	//	min_alarm	not set for Label
	//	max_warning	not set for Label
	//	min_warning	not set for Label
	//	delta_t	not set for Label
	//	delta_val	not set for Label
	
	label->set_default_properties(label_prop);
	//	Not Polled
	label->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(label);

	//	Attribute : HorPosRelative
	HorPosRelativeAttrib	*horposrelative = new HorPosRelativeAttrib();
	Tango::UserDefaultAttrProp	horposrelative_prop;
	horposrelative_prop.set_description("Horizontal relative position of the spot int the image. (Measure)");
	horposrelative_prop.set_label("HorPosRelative");
	horposrelative_prop.set_unit("mm");
	horposrelative_prop.set_standard_unit("mm");
	horposrelative_prop.set_display_unit("mm");
	horposrelative_prop.set_format("%.3f");
	//	max_value	not set for HorPosRelative
	//	min_value	not set for HorPosRelative
	//	max_alarm	not set for HorPosRelative
	//	min_alarm	not set for HorPosRelative
	//	max_warning	not set for HorPosRelative
	//	min_warning	not set for HorPosRelative
	//	delta_t	not set for HorPosRelative
	//	delta_val	not set for HorPosRelative
	
	horposrelative->set_default_properties(horposrelative_prop);
	//	Not Polled
	horposrelative->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(horposrelative);

	//	Attribute : VerPosRelative
	VerPosRelativeAttrib	*verposrelative = new VerPosRelativeAttrib();
	Tango::UserDefaultAttrProp	verposrelative_prop;
	verposrelative_prop.set_description("Vertical relative position of the spot int the image. (Measure)");
	verposrelative_prop.set_label("VerPosRelative");
	verposrelative_prop.set_unit("mm");
	verposrelative_prop.set_standard_unit("mm");
	verposrelative_prop.set_display_unit("mm");
	verposrelative_prop.set_format("%.3f");
	//	max_value	not set for VerPosRelative
	//	min_value	not set for VerPosRelative
	//	max_alarm	not set for VerPosRelative
	//	min_alarm	not set for VerPosRelative
	//	max_warning	not set for VerPosRelative
	//	min_warning	not set for VerPosRelative
	//	delta_t	not set for VerPosRelative
	//	delta_val	not set for VerPosRelative
	
	verposrelative->set_default_properties(verposrelative_prop);
	//	Not Polled
	verposrelative->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(verposrelative);

	//	Attribute : Phase
	PhaseAttrib	*phase = new PhaseAttrib();
	Tango::UserDefaultAttrProp	phase_prop;
	phase_prop.set_description("Inclination in degrees of the image.(Measure)");
	phase_prop.set_label("Phase");
	phase_prop.set_unit("deg");
	phase_prop.set_standard_unit("deg");
	phase_prop.set_display_unit("deg");
	phase_prop.set_format("%.2f");
	//	max_value	not set for Phase
	//	min_value	not set for Phase
	//	max_alarm	not set for Phase
	//	min_alarm	not set for Phase
	//	max_warning	not set for Phase
	//	min_warning	not set for Phase
	//	delta_t	not set for Phase
	//	delta_val	not set for Phase
	
	phase->set_default_properties(phase_prop);
	//	Not Polled
	phase->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(phase);

	//	Attribute : ScaleHor
	ScaleHorAttrib	*scalehor = new ScaleHorAttrib();
	Tango::UserDefaultAttrProp	scalehor_prop;
	scalehor_prop.set_description("Set the number of pixels per mm in the horizontal plane");
	//	label	not set for ScaleHor
	//	unit	not set for ScaleHor
	//	standard_unit	not set for ScaleHor
	//	display_unit	not set for ScaleHor
	scalehor_prop.set_format("%.1f");
	scalehor_prop.set_max_value("1000");
	scalehor_prop.set_min_value("0");
	//	max_alarm	not set for ScaleHor
	//	min_alarm	not set for ScaleHor
	//	max_warning	not set for ScaleHor
	//	min_warning	not set for ScaleHor
	//	delta_t	not set for ScaleHor
	//	delta_val	not set for ScaleHor
	
	scalehor->set_default_properties(scalehor_prop);
	//	Not Polled
	scalehor->set_disp_level(Tango::OPERATOR);
	scalehor->set_memorized();
	scalehor->set_memorized_init(false);
	att_list.push_back(scalehor);

	//	Attribute : ScaleVer
	ScaleVerAttrib	*scalever = new ScaleVerAttrib();
	Tango::UserDefaultAttrProp	scalever_prop;
	scalever_prop.set_description("Set the number of pixels per mm in the vertical plane");
	//	label	not set for ScaleVer
	//	unit	not set for ScaleVer
	//	standard_unit	not set for ScaleVer
	//	display_unit	not set for ScaleVer
	scalever_prop.set_format("%.1f");
	scalever_prop.set_max_value("1000");
	scalever_prop.set_min_value("0");
	//	max_alarm	not set for ScaleVer
	//	min_alarm	not set for ScaleVer
	//	max_warning	not set for ScaleVer
	//	min_warning	not set for ScaleVer
	//	delta_t	not set for ScaleVer
	//	delta_val	not set for ScaleVer
	
	scalever->set_default_properties(scalever_prop);
	//	Not Polled
	scalever->set_disp_level(Tango::OPERATOR);
	scalever->set_memorized();
	scalever->set_memorized_init(false);
	att_list.push_back(scalever);

	//	Attribute : OffsetHor
	OffsetHorAttrib	*offsethor = new OffsetHorAttrib();
	Tango::UserDefaultAttrProp	offsethor_prop;
	offsethor_prop.set_description("Horizontal mechanical offset in mm");
	//	label	not set for OffsetHor
	offsethor_prop.set_unit("mm");
	//	standard_unit	not set for OffsetHor
	offsethor_prop.set_display_unit("mm");
	offsethor_prop.set_format("%.3f");
	offsethor_prop.set_max_value("1000");
	offsethor_prop.set_min_value("-1000");
	//	max_alarm	not set for OffsetHor
	//	min_alarm	not set for OffsetHor
	//	max_warning	not set for OffsetHor
	//	min_warning	not set for OffsetHor
	//	delta_t	not set for OffsetHor
	//	delta_val	not set for OffsetHor
	
	offsethor->set_default_properties(offsethor_prop);
	//	Not Polled
	offsethor->set_disp_level(Tango::OPERATOR);
	offsethor->set_memorized();
	offsethor->set_memorized_init(false);
	att_list.push_back(offsethor);

	//	Attribute : OffsetVer
	OffsetVerAttrib	*offsetver = new OffsetVerAttrib();
	Tango::UserDefaultAttrProp	offsetver_prop;
	offsetver_prop.set_description("Vertical mechanical offset in mm");
	//	label	not set for OffsetVer
	offsetver_prop.set_unit("mm");
	//	standard_unit	not set for OffsetVer
	offsetver_prop.set_display_unit("mm");
	offsetver_prop.set_format("%.3f");
	offsetver_prop.set_max_value("1000");
	offsetver_prop.set_min_value("-1000");
	//	max_alarm	not set for OffsetVer
	//	min_alarm	not set for OffsetVer
	//	max_warning	not set for OffsetVer
	//	min_warning	not set for OffsetVer
	//	delta_t	not set for OffsetVer
	//	delta_val	not set for OffsetVer
	
	offsetver->set_default_properties(offsetver_prop);
	//	Not Polled
	offsetver->set_disp_level(Tango::OPERATOR);
	offsetver->set_memorized();
	offsetver->set_memorized_init(false);
	att_list.push_back(offsetver);

	//	Attribute : PlotOffsetAxis
	PlotOffsetAxisAttrib	*plotoffsetaxis = new PlotOffsetAxisAttrib();
	Tango::UserDefaultAttrProp	plotoffsetaxis_prop;
	plotoffsetaxis_prop.set_description("Plot reference position axis. Reference position coordinates are (OffsetHor,OffsetVer)");
	//	label	not set for PlotOffsetAxis
	//	unit	not set for PlotOffsetAxis
	//	standard_unit	not set for PlotOffsetAxis
	//	display_unit	not set for PlotOffsetAxis
	//	format	not set for PlotOffsetAxis
	//	max_value	not set for PlotOffsetAxis
	//	min_value	not set for PlotOffsetAxis
	//	max_alarm	not set for PlotOffsetAxis
	//	min_alarm	not set for PlotOffsetAxis
	//	max_warning	not set for PlotOffsetAxis
	//	min_warning	not set for PlotOffsetAxis
	//	delta_t	not set for PlotOffsetAxis
	//	delta_val	not set for PlotOffsetAxis
	
	plotoffsetaxis->set_default_properties(plotoffsetaxis_prop);
	//	Not Polled
	plotoffsetaxis->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(plotoffsetaxis);

	//	Attribute : Intensity
	IntensityAttrib	*intensity = new IntensityAttrib();
	Tango::UserDefaultAttrProp	intensity_prop;
	intensity_prop.set_description("Sum of pixel values inside the roi");
	//	label	not set for Intensity
	//	unit	not set for Intensity
	//	standard_unit	not set for Intensity
	//	display_unit	not set for Intensity
	intensity_prop.set_format("%.0f");
	intensity_prop.set_max_value("2000000000");
	intensity_prop.set_min_value("0");
	//	max_alarm	not set for Intensity
	//	min_alarm	not set for Intensity
	//	max_warning	not set for Intensity
	//	min_warning	not set for Intensity
	//	delta_t	not set for Intensity
	//	delta_val	not set for Intensity
	
	intensity->set_default_properties(intensity_prop);
	//	Not Polled
	intensity->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(intensity);

	//	Attribute : SignHor
	SignHorAttrib	*signhor = new SignHorAttrib();
	Tango::UserDefaultAttrProp	signhor_prop;
	signhor_prop.set_description("Horizontal versus of the axis (1,-1)");
	//	label	not set for SignHor
	//	unit	not set for SignHor
	//	standard_unit	not set for SignHor
	//	display_unit	not set for SignHor
	//	format	not set for SignHor
	//	max_value	not set for SignHor
	//	min_value	not set for SignHor
	//	max_alarm	not set for SignHor
	//	min_alarm	not set for SignHor
	//	max_warning	not set for SignHor
	//	min_warning	not set for SignHor
	//	delta_t	not set for SignHor
	//	delta_val	not set for SignHor
	
	signhor->set_default_properties(signhor_prop);
	//	Not Polled
	signhor->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(signhor);

	//	Attribute : SignVer
	SignVerAttrib	*signver = new SignVerAttrib();
	Tango::UserDefaultAttrProp	signver_prop;
	signver_prop.set_description("Vertical versus of the axis (1,-1)");
	//	label	not set for SignVer
	//	unit	not set for SignVer
	//	standard_unit	not set for SignVer
	//	display_unit	not set for SignVer
	//	format	not set for SignVer
	//	max_value	not set for SignVer
	//	min_value	not set for SignVer
	//	max_alarm	not set for SignVer
	//	min_alarm	not set for SignVer
	//	max_warning	not set for SignVer
	//	min_warning	not set for SignVer
	//	delta_t	not set for SignVer
	//	delta_val	not set for SignVer
	
	signver->set_default_properties(signver_prop);
	//	Not Polled
	signver->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(signver);

	//	Attribute : ProcessMode
	ProcessModeAttrib	*processmode = new ProcessModeAttrib();
	Tango::UserDefaultAttrProp	processmode_prop;
	processmode_prop.set_description("Processing mode:\n0=raw rms\n1=gaussian fit\n2=asymmetric gaussian fit\n3=confiteor");
	//	label	not set for ProcessMode
	//	unit	not set for ProcessMode
	//	standard_unit	not set for ProcessMode
	//	display_unit	not set for ProcessMode
	processmode_prop.set_format("%d");
	processmode_prop.set_max_value("3");
	processmode_prop.set_min_value("0");
	//	max_alarm	not set for ProcessMode
	//	min_alarm	not set for ProcessMode
	//	max_warning	not set for ProcessMode
	//	min_warning	not set for ProcessMode
	//	delta_t	not set for ProcessMode
	//	delta_val	not set for ProcessMode
	
	processmode->set_default_properties(processmode_prop);
	//	Not Polled
	processmode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(processmode);

	//	Attribute : DebugThread
	DebugThreadAttrib	*debugthread = new DebugThreadAttrib();
	Tango::UserDefaultAttrProp	debugthread_prop;
	//	description	not set for DebugThread
	//	label	not set for DebugThread
	//	unit	not set for DebugThread
	//	standard_unit	not set for DebugThread
	//	display_unit	not set for DebugThread
	//	format	not set for DebugThread
	//	max_value	not set for DebugThread
	//	min_value	not set for DebugThread
	//	max_alarm	not set for DebugThread
	//	min_alarm	not set for DebugThread
	//	max_warning	not set for DebugThread
	//	min_warning	not set for DebugThread
	//	delta_t	not set for DebugThread
	//	delta_val	not set for DebugThread
	
	debugthread->set_default_properties(debugthread_prop);
	//	Not Polled
	debugthread->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(debugthread);

	//	Attribute : BlackLevel
	BlackLevelAttrib	*blacklevel = new BlackLevelAttrib();
	Tango::UserDefaultAttrProp	blacklevel_prop;
	//	description	not set for BlackLevel
	//	label	not set for BlackLevel
	//	unit	not set for BlackLevel
	//	standard_unit	not set for BlackLevel
	//	display_unit	not set for BlackLevel
	blacklevel_prop.set_format("%d");
	blacklevel_prop.set_max_value("8196");
	blacklevel_prop.set_min_value("0");
	//	max_alarm	not set for BlackLevel
	//	min_alarm	not set for BlackLevel
	//	max_warning	not set for BlackLevel
	//	min_warning	not set for BlackLevel
	//	delta_t	not set for BlackLevel
	//	delta_val	not set for BlackLevel
	
	blacklevel->set_default_properties(blacklevel_prop);
	//	Not Polled
	blacklevel->set_disp_level(Tango::OPERATOR);
	blacklevel->set_memorized();
	blacklevel->set_memorized_init(false);
	att_list.push_back(blacklevel);

	//	Attribute : ImageBufferSize
	ImageBufferSizeAttrib	*imagebuffersize = new ImageBufferSizeAttrib();
	Tango::UserDefaultAttrProp	imagebuffersize_prop;
	imagebuffersize_prop.set_description("Set image circular buffer size");
	//	label	not set for ImageBufferSize
	//	unit	not set for ImageBufferSize
	//	standard_unit	not set for ImageBufferSize
	//	display_unit	not set for ImageBufferSize
	imagebuffersize_prop.set_format("%d");
	imagebuffersize_prop.set_max_value("10000");
	imagebuffersize_prop.set_min_value("1");
	//	max_alarm	not set for ImageBufferSize
	//	min_alarm	not set for ImageBufferSize
	//	max_warning	not set for ImageBufferSize
	//	min_warning	not set for ImageBufferSize
	//	delta_t	not set for ImageBufferSize
	//	delta_val	not set for ImageBufferSize
	
	imagebuffersize->set_default_properties(imagebuffersize_prop);
	//	Not Polled
	imagebuffersize->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(imagebuffersize);

	//	Attribute : ImageAcquisitionCounter
	ImageAcquisitionCounterAttrib	*imageacquisitioncounter = new ImageAcquisitionCounterAttrib();
	Tango::UserDefaultAttrProp	imageacquisitioncounter_prop;
	//	description	not set for ImageAcquisitionCounter
	//	label	not set for ImageAcquisitionCounter
	//	unit	not set for ImageAcquisitionCounter
	//	standard_unit	not set for ImageAcquisitionCounter
	//	display_unit	not set for ImageAcquisitionCounter
	imageacquisitioncounter_prop.set_format("%d");
	imageacquisitioncounter_prop.set_max_value("2100000000");
	imageacquisitioncounter_prop.set_min_value("0");
	//	max_alarm	not set for ImageAcquisitionCounter
	//	min_alarm	not set for ImageAcquisitionCounter
	//	max_warning	not set for ImageAcquisitionCounter
	//	min_warning	not set for ImageAcquisitionCounter
	//	delta_t	not set for ImageAcquisitionCounter
	//	delta_val	not set for ImageAcquisitionCounter
	
	imageacquisitioncounter->set_default_properties(imageacquisitioncounter_prop);
	//	Not Polled
	imageacquisitioncounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(imageacquisitioncounter);

	//	Attribute : ExposureAutoEnable
	ExposureAutoEnableAttrib	*exposureautoenable = new ExposureAutoEnableAttrib();
	Tango::UserDefaultAttrProp	exposureautoenable_prop;
	//	description	not set for ExposureAutoEnable
	//	label	not set for ExposureAutoEnable
	//	unit	not set for ExposureAutoEnable
	//	standard_unit	not set for ExposureAutoEnable
	//	display_unit	not set for ExposureAutoEnable
	//	format	not set for ExposureAutoEnable
	//	max_value	not set for ExposureAutoEnable
	//	min_value	not set for ExposureAutoEnable
	//	max_alarm	not set for ExposureAutoEnable
	//	min_alarm	not set for ExposureAutoEnable
	//	max_warning	not set for ExposureAutoEnable
	//	min_warning	not set for ExposureAutoEnable
	//	delta_t	not set for ExposureAutoEnable
	//	delta_val	not set for ExposureAutoEnable
	
	exposureautoenable->set_default_properties(exposureautoenable_prop);
	//	Not Polled
	exposureautoenable->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(exposureautoenable);

	//	Attribute : ExposureAutoMin
	ExposureAutoMinAttrib	*exposureautomin = new ExposureAutoMinAttrib();
	Tango::UserDefaultAttrProp	exposureautomin_prop;
	//	description	not set for ExposureAutoMin
	//	label	not set for ExposureAutoMin
	exposureautomin_prop.set_unit("us");
	//	standard_unit	not set for ExposureAutoMin
	exposureautomin_prop.set_display_unit("us");
	exposureautomin_prop.set_format("%d");
	exposureautomin_prop.set_max_value("10000000");
	exposureautomin_prop.set_min_value("100");
	//	max_alarm	not set for ExposureAutoMin
	//	min_alarm	not set for ExposureAutoMin
	//	max_warning	not set for ExposureAutoMin
	//	min_warning	not set for ExposureAutoMin
	//	delta_t	not set for ExposureAutoMin
	//	delta_val	not set for ExposureAutoMin
	
	exposureautomin->set_default_properties(exposureautomin_prop);
	//	Not Polled
	exposureautomin->set_disp_level(Tango::OPERATOR);
	exposureautomin->set_memorized();
	exposureautomin->set_memorized_init(false);
	att_list.push_back(exposureautomin);

	//	Attribute : ExposureAutoMax
	ExposureAutoMaxAttrib	*exposureautomax = new ExposureAutoMaxAttrib();
	Tango::UserDefaultAttrProp	exposureautomax_prop;
	//	description	not set for ExposureAutoMax
	//	label	not set for ExposureAutoMax
	exposureautomax_prop.set_unit("us");
	//	standard_unit	not set for ExposureAutoMax
	exposureautomax_prop.set_display_unit("us");
	exposureautomax_prop.set_format("%d");
	exposureautomax_prop.set_max_value("10000000");
	exposureautomax_prop.set_min_value("100");
	//	max_alarm	not set for ExposureAutoMax
	//	min_alarm	not set for ExposureAutoMax
	//	max_warning	not set for ExposureAutoMax
	//	min_warning	not set for ExposureAutoMax
	//	delta_t	not set for ExposureAutoMax
	//	delta_val	not set for ExposureAutoMax
	
	exposureautomax->set_default_properties(exposureautomax_prop);
	//	Not Polled
	exposureautomax->set_disp_level(Tango::OPERATOR);
	exposureautomax->set_memorized();
	exposureautomax->set_memorized_init(false);
	att_list.push_back(exposureautomax);

	//	Attribute : GainAutoEnable
	GainAutoEnableAttrib	*gainautoenable = new GainAutoEnableAttrib();
	Tango::UserDefaultAttrProp	gainautoenable_prop;
	//	description	not set for GainAutoEnable
	//	label	not set for GainAutoEnable
	//	unit	not set for GainAutoEnable
	//	standard_unit	not set for GainAutoEnable
	//	display_unit	not set for GainAutoEnable
	//	format	not set for GainAutoEnable
	//	max_value	not set for GainAutoEnable
	//	min_value	not set for GainAutoEnable
	//	max_alarm	not set for GainAutoEnable
	//	min_alarm	not set for GainAutoEnable
	//	max_warning	not set for GainAutoEnable
	//	min_warning	not set for GainAutoEnable
	//	delta_t	not set for GainAutoEnable
	//	delta_val	not set for GainAutoEnable
	
	gainautoenable->set_default_properties(gainautoenable_prop);
	//	Not Polled
	gainautoenable->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(gainautoenable);

	//	Attribute : GainAutoMin
	GainAutoMinAttrib	*gainautomin = new GainAutoMinAttrib();
	Tango::UserDefaultAttrProp	gainautomin_prop;
	//	description	not set for GainAutoMin
	//	label	not set for GainAutoMin
	gainautomin_prop.set_unit("dB");
	//	standard_unit	not set for GainAutoMin
	gainautomin_prop.set_display_unit("dB");
	gainautomin_prop.set_format("%.1f");
	gainautomin_prop.set_max_value("30");
	gainautomin_prop.set_min_value("0");
	//	max_alarm	not set for GainAutoMin
	//	min_alarm	not set for GainAutoMin
	//	max_warning	not set for GainAutoMin
	//	min_warning	not set for GainAutoMin
	//	delta_t	not set for GainAutoMin
	//	delta_val	not set for GainAutoMin
	
	gainautomin->set_default_properties(gainautomin_prop);
	//	Not Polled
	gainautomin->set_disp_level(Tango::OPERATOR);
	gainautomin->set_memorized();
	gainautomin->set_memorized_init(false);
	att_list.push_back(gainautomin);

	//	Attribute : GainAutoMax
	GainAutoMaxAttrib	*gainautomax = new GainAutoMaxAttrib();
	Tango::UserDefaultAttrProp	gainautomax_prop;
	//	description	not set for GainAutoMax
	//	label	not set for GainAutoMax
	gainautomax_prop.set_unit("dB");
	//	standard_unit	not set for GainAutoMax
	gainautomax_prop.set_display_unit("dB");
	gainautomax_prop.set_format("%.1f");
	gainautomax_prop.set_max_value("30");
	gainautomax_prop.set_min_value("0");
	//	max_alarm	not set for GainAutoMax
	//	min_alarm	not set for GainAutoMax
	//	max_warning	not set for GainAutoMax
	//	min_warning	not set for GainAutoMax
	//	delta_t	not set for GainAutoMax
	//	delta_val	not set for GainAutoMax
	
	gainautomax->set_default_properties(gainautomax_prop);
	//	Not Polled
	gainautomax->set_disp_level(Tango::OPERATOR);
	gainautomax->set_memorized();
	gainautomax->set_memorized_init(false);
	att_list.push_back(gainautomax);

	//	Attribute : AutoTargetValue
	AutoTargetValueAttrib	*autotargetvalue = new AutoTargetValueAttrib();
	Tango::UserDefaultAttrProp	autotargetvalue_prop;
	//	description	not set for AutoTargetValue
	//	label	not set for AutoTargetValue
	//	unit	not set for AutoTargetValue
	//	standard_unit	not set for AutoTargetValue
	//	display_unit	not set for AutoTargetValue
	autotargetvalue_prop.set_format("%d");
	autotargetvalue_prop.set_max_value("255");
	autotargetvalue_prop.set_min_value("0");
	//	max_alarm	not set for AutoTargetValue
	//	min_alarm	not set for AutoTargetValue
	//	max_warning	not set for AutoTargetValue
	//	min_warning	not set for AutoTargetValue
	//	delta_t	not set for AutoTargetValue
	//	delta_val	not set for AutoTargetValue
	
	autotargetvalue->set_default_properties(autotargetvalue_prop);
	//	Not Polled
	autotargetvalue->set_disp_level(Tango::OPERATOR);
	autotargetvalue->set_memorized();
	autotargetvalue->set_memorized_init(false);
	att_list.push_back(autotargetvalue);

	//	Attribute : AutoFeedbackGain
	AutoFeedbackGainAttrib	*autofeedbackgain = new AutoFeedbackGainAttrib();
	Tango::UserDefaultAttrProp	autofeedbackgain_prop;
	//	description	not set for AutoFeedbackGain
	//	label	not set for AutoFeedbackGain
	//	unit	not set for AutoFeedbackGain
	//	standard_unit	not set for AutoFeedbackGain
	//	display_unit	not set for AutoFeedbackGain
	autofeedbackgain_prop.set_format("%.2f");
	autofeedbackgain_prop.set_max_value("1");
	autofeedbackgain_prop.set_min_value("0");
	//	max_alarm	not set for AutoFeedbackGain
	//	min_alarm	not set for AutoFeedbackGain
	//	max_warning	not set for AutoFeedbackGain
	//	min_warning	not set for AutoFeedbackGain
	//	delta_t	not set for AutoFeedbackGain
	//	delta_val	not set for AutoFeedbackGain
	
	autofeedbackgain->set_default_properties(autofeedbackgain_prop);
	//	Not Polled
	autofeedbackgain->set_disp_level(Tango::OPERATOR);
	autofeedbackgain->set_memorized();
	autofeedbackgain->set_memorized_init(false);
	att_list.push_back(autofeedbackgain);

	//	Attribute : AutoFeedbackDws
	AutoFeedbackDwsAttrib	*autofeedbackdws = new AutoFeedbackDwsAttrib();
	Tango::UserDefaultAttrProp	autofeedbackdws_prop;
	//	description	not set for AutoFeedbackDws
	//	label	not set for AutoFeedbackDws
	//	unit	not set for AutoFeedbackDws
	//	standard_unit	not set for AutoFeedbackDws
	//	display_unit	not set for AutoFeedbackDws
	autofeedbackdws_prop.set_format("%d");
	autofeedbackdws_prop.set_max_value("9999");
	autofeedbackdws_prop.set_min_value("0");
	//	max_alarm	not set for AutoFeedbackDws
	//	min_alarm	not set for AutoFeedbackDws
	//	max_warning	not set for AutoFeedbackDws
	//	min_warning	not set for AutoFeedbackDws
	//	delta_t	not set for AutoFeedbackDws
	//	delta_val	not set for AutoFeedbackDws
	
	autofeedbackdws->set_default_properties(autofeedbackdws_prop);
	//	Not Polled
	autofeedbackdws->set_disp_level(Tango::OPERATOR);
	autofeedbackdws->set_memorized();
	autofeedbackdws->set_memorized_init(false);
	att_list.push_back(autofeedbackdws);

	//	Attribute : AutoFeedbackTargetThres
	AutoFeedbackTargetThresAttrib	*autofeedbacktargetthres = new AutoFeedbackTargetThresAttrib();
	Tango::UserDefaultAttrProp	autofeedbacktargetthres_prop;
	//	description	not set for AutoFeedbackTargetThres
	//	label	not set for AutoFeedbackTargetThres
	//	unit	not set for AutoFeedbackTargetThres
	//	standard_unit	not set for AutoFeedbackTargetThres
	//	display_unit	not set for AutoFeedbackTargetThres
	autofeedbacktargetthres_prop.set_format("%d");
	autofeedbacktargetthres_prop.set_max_value("255");
	autofeedbacktargetthres_prop.set_min_value("0");
	//	max_alarm	not set for AutoFeedbackTargetThres
	//	min_alarm	not set for AutoFeedbackTargetThres
	//	max_warning	not set for AutoFeedbackTargetThres
	//	min_warning	not set for AutoFeedbackTargetThres
	//	delta_t	not set for AutoFeedbackTargetThres
	//	delta_val	not set for AutoFeedbackTargetThres
	
	autofeedbacktargetthres->set_default_properties(autofeedbacktargetthres_prop);
	//	Not Polled
	autofeedbacktargetthres->set_disp_level(Tango::OPERATOR);
	autofeedbacktargetthres->set_memorized();
	autofeedbacktargetthres->set_memorized_init(false);
	att_list.push_back(autofeedbacktargetthres);

	//	Attribute : AutoFeedbackDeadBand
	AutoFeedbackDeadBandAttrib	*autofeedbackdeadband = new AutoFeedbackDeadBandAttrib();
	Tango::UserDefaultAttrProp	autofeedbackdeadband_prop;
	//	description	not set for AutoFeedbackDeadBand
	//	label	not set for AutoFeedbackDeadBand
	//	unit	not set for AutoFeedbackDeadBand
	//	standard_unit	not set for AutoFeedbackDeadBand
	//	display_unit	not set for AutoFeedbackDeadBand
	autofeedbackdeadband_prop.set_format("%d");
	autofeedbackdeadband_prop.set_max_value("255");
	autofeedbackdeadband_prop.set_min_value("0");
	//	max_alarm	not set for AutoFeedbackDeadBand
	//	min_alarm	not set for AutoFeedbackDeadBand
	//	max_warning	not set for AutoFeedbackDeadBand
	//	min_warning	not set for AutoFeedbackDeadBand
	//	delta_t	not set for AutoFeedbackDeadBand
	//	delta_val	not set for AutoFeedbackDeadBand
	
	autofeedbackdeadband->set_default_properties(autofeedbackdeadband_prop);
	//	Not Polled
	autofeedbackdeadband->set_disp_level(Tango::OPERATOR);
	autofeedbackdeadband->set_memorized();
	autofeedbackdeadband->set_memorized_init(false);
	att_list.push_back(autofeedbackdeadband);

	//	Attribute : FitError
	FitErrorAttrib	*fiterror = new FitErrorAttrib();
	Tango::UserDefaultAttrProp	fiterror_prop;
	fiterror_prop.set_description("Fit error\n0=no error\n1=hor fit err\n2= ver fit err\n3=hor/ver fit err");
	//	label	not set for FitError
	//	unit	not set for FitError
	//	standard_unit	not set for FitError
	//	display_unit	not set for FitError
	fiterror_prop.set_format("%d");
	fiterror_prop.set_max_value("3");
	fiterror_prop.set_min_value("0");
	//	max_alarm	not set for FitError
	//	min_alarm	not set for FitError
	//	max_warning	not set for FitError
	//	min_warning	not set for FitError
	//	delta_t	not set for FitError
	//	delta_val	not set for FitError
	
	fiterror->set_default_properties(fiterror_prop);
	//	Not Polled
	fiterror->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(fiterror);

	//	Attribute : BunchNumber
	BunchNumberAttrib	*bunchnumber = new BunchNumberAttrib();
	Tango::UserDefaultAttrProp	bunchnumber_prop;
	bunchnumber_prop.set_description("Absolute acquisition image counter.(Connection Diagnostics)");
	//	label	not set for BunchNumber
	//	unit	not set for BunchNumber
	//	standard_unit	not set for BunchNumber
	//	display_unit	not set for BunchNumber
	bunchnumber_prop.set_format("%d");
	//	max_value	not set for BunchNumber
	//	min_value	not set for BunchNumber
	//	max_alarm	not set for BunchNumber
	//	min_alarm	not set for BunchNumber
	//	max_warning	not set for BunchNumber
	//	min_warning	not set for BunchNumber
	//	delta_t	not set for BunchNumber
	//	delta_val	not set for BunchNumber
	
	bunchnumber->set_default_properties(bunchnumber_prop);
	//	Not Polled
	bunchnumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(bunchnumber);

	//	Attribute : MeanIntensityThreshold
	MeanIntensityThresholdAttrib	*meanintensitythreshold = new MeanIntensityThresholdAttrib();
	Tango::UserDefaultAttrProp	meanintensitythreshold_prop;
	//	description	not set for MeanIntensityThreshold
	//	label	not set for MeanIntensityThreshold
	//	unit	not set for MeanIntensityThreshold
	//	standard_unit	not set for MeanIntensityThreshold
	//	display_unit	not set for MeanIntensityThreshold
	meanintensitythreshold_prop.set_format("%d");
	meanintensitythreshold_prop.set_max_value("4096");
	meanintensitythreshold_prop.set_min_value("0");
	//	max_alarm	not set for MeanIntensityThreshold
	//	min_alarm	not set for MeanIntensityThreshold
	//	max_warning	not set for MeanIntensityThreshold
	//	min_warning	not set for MeanIntensityThreshold
	//	delta_t	not set for MeanIntensityThreshold
	//	delta_val	not set for MeanIntensityThreshold
	
	meanintensitythreshold->set_default_properties(meanintensitythreshold_prop);
	//	Not Polled
	meanintensitythreshold->set_disp_level(Tango::OPERATOR);
	meanintensitythreshold->set_memorized();
	meanintensitythreshold->set_memorized_init(true);
	att_list.push_back(meanintensitythreshold);

	//	Attribute : Binning
	BinningAttrib	*binning = new BinningAttrib();
	Tango::UserDefaultAttrProp	binning_prop;
	//	description	not set for Binning
	//	label	not set for Binning
	//	unit	not set for Binning
	//	standard_unit	not set for Binning
	//	display_unit	not set for Binning
	binning_prop.set_format("%d");
	binning_prop.set_max_value("9");
	binning_prop.set_min_value("1");
	//	max_alarm	not set for Binning
	//	min_alarm	not set for Binning
	//	max_warning	not set for Binning
	//	min_warning	not set for Binning
	//	delta_t	not set for Binning
	//	delta_val	not set for Binning
	
	binning->set_default_properties(binning_prop);
	//	Not Polled
	binning->set_disp_level(Tango::OPERATOR);
	binning->set_memorized();
	binning->set_memorized_init(false);
	att_list.push_back(binning);

	//	Attribute : DISEnable
	DISEnableAttrib	*disenable = new DISEnableAttrib();
	Tango::UserDefaultAttrProp	disenable_prop;
	//	description	not set for DISEnable
	//	label	not set for DISEnable
	//	unit	not set for DISEnable
	//	standard_unit	not set for DISEnable
	//	display_unit	not set for DISEnable
	//	format	not set for DISEnable
	//	max_value	not set for DISEnable
	//	min_value	not set for DISEnable
	//	max_alarm	not set for DISEnable
	//	min_alarm	not set for DISEnable
	//	max_warning	not set for DISEnable
	//	min_warning	not set for DISEnable
	//	delta_t	not set for DISEnable
	//	delta_val	not set for DISEnable
	
	disenable->set_default_properties(disenable_prop);
	//	Not Polled
	disenable->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(disenable);

	//	Attribute : DisableTriggerTimeout
	DisableTriggerTimeoutAttrib	*disabletriggertimeout = new DisableTriggerTimeoutAttrib();
	Tango::UserDefaultAttrProp	disabletriggertimeout_prop;
	//	description	not set for DisableTriggerTimeout
	//	label	not set for DisableTriggerTimeout
	//	unit	not set for DisableTriggerTimeout
	//	standard_unit	not set for DisableTriggerTimeout
	//	display_unit	not set for DisableTriggerTimeout
	//	format	not set for DisableTriggerTimeout
	//	max_value	not set for DisableTriggerTimeout
	//	min_value	not set for DisableTriggerTimeout
	//	max_alarm	not set for DisableTriggerTimeout
	//	min_alarm	not set for DisableTriggerTimeout
	//	max_warning	not set for DisableTriggerTimeout
	//	min_warning	not set for DisableTriggerTimeout
	//	delta_t	not set for DisableTriggerTimeout
	//	delta_val	not set for DisableTriggerTimeout
	
	disabletriggertimeout->set_default_properties(disabletriggertimeout_prop);
	//	Not Polled
	disabletriggertimeout->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(disabletriggertimeout);

	//	Attribute : ImageSumSamples
	ImageSumSamplesAttrib	*imagesumsamples = new ImageSumSamplesAttrib();
	Tango::UserDefaultAttrProp	imagesumsamples_prop;
	imagesumsamples_prop.set_description("number of images summed in a ``moving`` sum image");
	//	label	not set for ImageSumSamples
	//	unit	not set for ImageSumSamples
	//	standard_unit	not set for ImageSumSamples
	//	display_unit	not set for ImageSumSamples
	imagesumsamples_prop.set_format("%d");
	imagesumsamples_prop.set_max_value("999999");
	imagesumsamples_prop.set_min_value("0");
	//	max_alarm	not set for ImageSumSamples
	//	min_alarm	not set for ImageSumSamples
	//	max_warning	not set for ImageSumSamples
	//	min_warning	not set for ImageSumSamples
	//	delta_t	not set for ImageSumSamples
	//	delta_val	not set for ImageSumSamples
	
	imagesumsamples->set_default_properties(imagesumsamples_prop);
	//	Not Polled
	imagesumsamples->set_disp_level(Tango::OPERATOR);
	imagesumsamples->set_memorized();
	imagesumsamples->set_memorized_init(true);
	att_list.push_back(imagesumsamples);

	//	Attribute : Model
	ModelAttrib	*model = new ModelAttrib();
	Tango::UserDefaultAttrProp	model_prop;
	//	description	not set for Model
	//	label	not set for Model
	//	unit	not set for Model
	//	standard_unit	not set for Model
	//	display_unit	not set for Model
	//	format	not set for Model
	//	max_value	not set for Model
	//	min_value	not set for Model
	//	max_alarm	not set for Model
	//	min_alarm	not set for Model
	//	max_warning	not set for Model
	//	min_warning	not set for Model
	//	delta_t	not set for Model
	//	delta_val	not set for Model
	
	model->set_default_properties(model_prop);
	//	Not Polled
	model->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(model);

	//	Attribute : FeedbackMode
	FeedbackModeAttrib	*feedbackmode = new FeedbackModeAttrib();
	Tango::UserDefaultAttrProp	feedbackmode_prop;
	feedbackmode_prop.set_description("true: when MeanIntensity is below MeanIntensityThreshold, the camera state is turned to FAULT");
	//	label	not set for FeedbackMode
	//	unit	not set for FeedbackMode
	//	standard_unit	not set for FeedbackMode
	//	display_unit	not set for FeedbackMode
	//	format	not set for FeedbackMode
	//	max_value	not set for FeedbackMode
	//	min_value	not set for FeedbackMode
	//	max_alarm	not set for FeedbackMode
	//	min_alarm	not set for FeedbackMode
	//	max_warning	not set for FeedbackMode
	//	min_warning	not set for FeedbackMode
	//	delta_t	not set for FeedbackMode
	//	delta_val	not set for FeedbackMode
	
	feedbackmode->set_default_properties(feedbackmode_prop);
	//	Not Polled
	feedbackmode->set_disp_level(Tango::OPERATOR);
	feedbackmode->set_memorized();
	feedbackmode->set_memorized_init(true);
	att_list.push_back(feedbackmode);

	//	Attribute : MeanIntensity
	MeanIntensityAttrib	*meanintensity = new MeanIntensityAttrib();
	Tango::UserDefaultAttrProp	meanintensity_prop;
	//	description	not set for MeanIntensity
	//	label	not set for MeanIntensity
	//	unit	not set for MeanIntensity
	//	standard_unit	not set for MeanIntensity
	//	display_unit	not set for MeanIntensity
	meanintensity_prop.set_format("%f");
	meanintensity_prop.set_max_value("65535");
	meanintensity_prop.set_min_value("0");
	//	max_alarm	not set for MeanIntensity
	//	min_alarm	not set for MeanIntensity
	//	max_warning	not set for MeanIntensity
	//	min_warning	not set for MeanIntensity
	//	delta_t	not set for MeanIntensity
	//	delta_val	not set for MeanIntensity
	
	meanintensity->set_default_properties(meanintensity_prop);
	//	Not Polled
	meanintensity->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(meanintensity);

	//	Attribute : FeedbackError
	FeedbackErrorAttrib	*feedbackerror = new FeedbackErrorAttrib();
	Tango::UserDefaultAttrProp	feedbackerror_prop;
	//	description	not set for FeedbackError
	//	label	not set for FeedbackError
	//	unit	not set for FeedbackError
	//	standard_unit	not set for FeedbackError
	//	display_unit	not set for FeedbackError
	//	format	not set for FeedbackError
	//	max_value	not set for FeedbackError
	//	min_value	not set for FeedbackError
	//	max_alarm	not set for FeedbackError
	//	min_alarm	not set for FeedbackError
	//	max_warning	not set for FeedbackError
	//	min_warning	not set for FeedbackError
	//	delta_t	not set for FeedbackError
	//	delta_val	not set for FeedbackError
	
	feedbackerror->set_default_properties(feedbackerror_prop);
	//	Not Polled
	feedbackerror->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(feedbackerror);

	//	Attribute : SearchBackgroundParam
	SearchBackgroundParamAttrib	*searchbackgroundparam = new SearchBackgroundParamAttrib();
	Tango::UserDefaultAttrProp	searchbackgroundparam_prop;
	searchbackgroundparam_prop.set_description("param[0]: number of background levels\nparam[1]: derivative percentage threshold");
	//	label	not set for SearchBackgroundParam
	//	unit	not set for SearchBackgroundParam
	//	standard_unit	not set for SearchBackgroundParam
	//	display_unit	not set for SearchBackgroundParam
	//	format	not set for SearchBackgroundParam
	//	max_value	not set for SearchBackgroundParam
	//	min_value	not set for SearchBackgroundParam
	//	max_alarm	not set for SearchBackgroundParam
	//	min_alarm	not set for SearchBackgroundParam
	//	max_warning	not set for SearchBackgroundParam
	//	min_warning	not set for SearchBackgroundParam
	//	delta_t	not set for SearchBackgroundParam
	//	delta_val	not set for SearchBackgroundParam
	
	searchbackgroundparam->set_default_properties(searchbackgroundparam_prop);
	//	Not Polled
	searchbackgroundparam->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(searchbackgroundparam);

	//	Attribute : HorProfile
	HorProfileAttrib	*horprofile = new HorProfileAttrib();
	Tango::UserDefaultAttrProp	horprofile_prop;
	horprofile_prop.set_description("Horizontal profile of the image.(Measure)");
	//	label	not set for HorProfile
	//	unit	not set for HorProfile
	//	standard_unit	not set for HorProfile
	//	display_unit	not set for HorProfile
	//	format	not set for HorProfile
	//	max_value	not set for HorProfile
	//	min_value	not set for HorProfile
	//	max_alarm	not set for HorProfile
	//	min_alarm	not set for HorProfile
	//	max_warning	not set for HorProfile
	//	min_warning	not set for HorProfile
	//	delta_t	not set for HorProfile
	//	delta_val	not set for HorProfile
	
	horprofile->set_default_properties(horprofile_prop);
	//	Not Polled
	horprofile->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(horprofile);

	//	Attribute : VerProfile
	VerProfileAttrib	*verprofile = new VerProfileAttrib();
	Tango::UserDefaultAttrProp	verprofile_prop;
	verprofile_prop.set_description("Vertical profile of the image.(Measure)");
	//	label	not set for VerProfile
	//	unit	not set for VerProfile
	//	standard_unit	not set for VerProfile
	//	display_unit	not set for VerProfile
	//	format	not set for VerProfile
	//	max_value	not set for VerProfile
	//	min_value	not set for VerProfile
	//	max_alarm	not set for VerProfile
	//	min_alarm	not set for VerProfile
	//	max_warning	not set for VerProfile
	//	min_warning	not set for VerProfile
	//	delta_t	not set for VerProfile
	//	delta_val	not set for VerProfile
	
	verprofile->set_default_properties(verprofile_prop);
	//	Not Polled
	verprofile->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(verprofile);

	//	Attribute : ErrorCounters
	ErrorCountersAttrib	*errorcounters = new ErrorCountersAttrib();
	Tango::UserDefaultAttrProp	errorcounters_prop;
	errorcounters_prop.set_description("Error counters:\ncounter[0]: acquisition error\ncounter[1]: packets lost\ncounter[2]: packets canceled\n(Connection Diagnostics)");
	//	label	not set for ErrorCounters
	//	unit	not set for ErrorCounters
	//	standard_unit	not set for ErrorCounters
	//	display_unit	not set for ErrorCounters
	//	format	not set for ErrorCounters
	//	max_value	not set for ErrorCounters
	//	min_value	not set for ErrorCounters
	//	max_alarm	not set for ErrorCounters
	//	min_alarm	not set for ErrorCounters
	//	max_warning	not set for ErrorCounters
	//	min_warning	not set for ErrorCounters
	//	delta_t	not set for ErrorCounters
	//	delta_val	not set for ErrorCounters
	
	errorcounters->set_default_properties(errorcounters_prop);
	//	Not Polled
	errorcounters->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(errorcounters);

	//	Attribute : TimeStamp
	TimeStampAttrib	*timestamp = new TimeStampAttrib();
	Tango::UserDefaultAttrProp	timestamp_prop;
	timestamp_prop.set_description("Current timestamp (unix time) of the current image");
	//	label	not set for TimeStamp
	//	unit	not set for TimeStamp
	//	standard_unit	not set for TimeStamp
	//	display_unit	not set for TimeStamp
	//	format	not set for TimeStamp
	//	max_value	not set for TimeStamp
	//	min_value	not set for TimeStamp
	//	max_alarm	not set for TimeStamp
	//	min_alarm	not set for TimeStamp
	//	max_warning	not set for TimeStamp
	//	min_warning	not set for TimeStamp
	//	delta_t	not set for TimeStamp
	//	delta_val	not set for TimeStamp
	
	timestamp->set_default_properties(timestamp_prop);
	//	Not Polled
	timestamp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(timestamp);

	//	Attribute : AutoRoiParam
	AutoRoiParamAttrib	*autoroiparam = new AutoRoiParamAttrib();
	Tango::UserDefaultAttrProp	autoroiparam_prop;
	autoroiparam_prop.set_description("Coordinates of the automatic roi (x1,y1,x2,y2)");
	//	label	not set for AutoRoiParam
	//	unit	not set for AutoRoiParam
	//	standard_unit	not set for AutoRoiParam
	//	display_unit	not set for AutoRoiParam
	//	format	not set for AutoRoiParam
	//	max_value	not set for AutoRoiParam
	//	min_value	not set for AutoRoiParam
	//	max_alarm	not set for AutoRoiParam
	//	min_alarm	not set for AutoRoiParam
	//	max_warning	not set for AutoRoiParam
	//	min_warning	not set for AutoRoiParam
	//	delta_t	not set for AutoRoiParam
	//	delta_val	not set for AutoRoiParam
	
	autoroiparam->set_default_properties(autoroiparam_prop);
	//	Not Polled
	autoroiparam->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(autoroiparam);

	//	Attribute : RoiParam
	RoiParamAttrib	*roiparam = new RoiParamAttrib();
	Tango::UserDefaultAttrProp	roiparam_prop;
	roiparam_prop.set_description("Coordinates of the manual roi(x1,y1,x2,y2). (Display Options)");
	//	label	not set for RoiParam
	//	unit	not set for RoiParam
	//	standard_unit	not set for RoiParam
	//	display_unit	not set for RoiParam
	//	format	not set for RoiParam
	//	max_value	not set for RoiParam
	//	min_value	not set for RoiParam
	//	max_alarm	not set for RoiParam
	//	min_alarm	not set for RoiParam
	//	max_warning	not set for RoiParam
	//	min_warning	not set for RoiParam
	//	delta_t	not set for RoiParam
	//	delta_val	not set for RoiParam
	
	roiparam->set_default_properties(roiparam_prop);
	//	Not Polled
	roiparam->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(roiparam);

	//	Attribute : HorFitProfile
	HorFitProfileAttrib	*horfitprofile = new HorFitProfileAttrib();
	Tango::UserDefaultAttrProp	horfitprofile_prop;
	horfitprofile_prop.set_description("Horizontal profile of the image.(Measure)");
	//	label	not set for HorFitProfile
	//	unit	not set for HorFitProfile
	//	standard_unit	not set for HorFitProfile
	//	display_unit	not set for HorFitProfile
	//	format	not set for HorFitProfile
	//	max_value	not set for HorFitProfile
	//	min_value	not set for HorFitProfile
	//	max_alarm	not set for HorFitProfile
	//	min_alarm	not set for HorFitProfile
	//	max_warning	not set for HorFitProfile
	//	min_warning	not set for HorFitProfile
	//	delta_t	not set for HorFitProfile
	//	delta_val	not set for HorFitProfile
	
	horfitprofile->set_default_properties(horfitprofile_prop);
	//	Not Polled
	horfitprofile->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(horfitprofile);

	//	Attribute : VerFitProfile
	VerFitProfileAttrib	*verfitprofile = new VerFitProfileAttrib();
	Tango::UserDefaultAttrProp	verfitprofile_prop;
	verfitprofile_prop.set_description("Horizontal profile of the image.(Measure)");
	//	label	not set for VerFitProfile
	//	unit	not set for VerFitProfile
	//	standard_unit	not set for VerFitProfile
	//	display_unit	not set for VerFitProfile
	//	format	not set for VerFitProfile
	//	max_value	not set for VerFitProfile
	//	min_value	not set for VerFitProfile
	//	max_alarm	not set for VerFitProfile
	//	min_alarm	not set for VerFitProfile
	//	max_warning	not set for VerFitProfile
	//	min_warning	not set for VerFitProfile
	//	delta_t	not set for VerFitProfile
	//	delta_val	not set for VerFitProfile
	
	verfitprofile->set_default_properties(verfitprofile_prop);
	//	Not Polled
	verfitprofile->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(verfitprofile);

	//	Attribute : HwRoiParam
	HwRoiParamAttrib	*hwroiparam = new HwRoiParamAttrib();
	Tango::UserDefaultAttrProp	hwroiparam_prop;
	hwroiparam_prop.set_description("Coordinates of the hardware roi(x1,y1,x2,y2). (Display Options)");
	//	label	not set for HwRoiParam
	//	unit	not set for HwRoiParam
	//	standard_unit	not set for HwRoiParam
	//	display_unit	not set for HwRoiParam
	//	format	not set for HwRoiParam
	//	max_value	not set for HwRoiParam
	//	min_value	not set for HwRoiParam
	//	max_alarm	not set for HwRoiParam
	//	min_alarm	not set for HwRoiParam
	//	max_warning	not set for HwRoiParam
	//	min_warning	not set for HwRoiParam
	//	delta_t	not set for HwRoiParam
	//	delta_val	not set for HwRoiParam
	
	hwroiparam->set_default_properties(hwroiparam_prop);
	//	Not Polled
	hwroiparam->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(hwroiparam);

	//	Attribute : Image8
	Image8Attrib	*image8 = new Image8Attrib();
	Tango::UserDefaultAttrProp	image8_prop;
	image8_prop.set_description("Image (8bit depth) of the camera.");
	image8_prop.set_label("Image8");
	//	unit	not set for Image8
	//	standard_unit	not set for Image8
	//	display_unit	not set for Image8
	//	format	not set for Image8
	//	max_value	not set for Image8
	//	min_value	not set for Image8
	//	max_alarm	not set for Image8
	//	min_alarm	not set for Image8
	//	max_warning	not set for Image8
	//	min_warning	not set for Image8
	//	delta_t	not set for Image8
	//	delta_val	not set for Image8
	
	image8->set_default_properties(image8_prop);
	//	Not Polled
	image8->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(image8);

	//	Attribute : Image8Icon
	Image8IconAttrib	*image8icon = new Image8IconAttrib();
	Tango::UserDefaultAttrProp	image8icon_prop;
	image8icon_prop.set_description("Decimated version of the image used to find the roi region");
	//	label	not set for Image8Icon
	//	unit	not set for Image8Icon
	//	standard_unit	not set for Image8Icon
	//	display_unit	not set for Image8Icon
	//	format	not set for Image8Icon
	//	max_value	not set for Image8Icon
	//	min_value	not set for Image8Icon
	//	max_alarm	not set for Image8Icon
	//	min_alarm	not set for Image8Icon
	//	max_warning	not set for Image8Icon
	//	min_warning	not set for Image8Icon
	//	delta_t	not set for Image8Icon
	//	delta_val	not set for Image8Icon
	
	image8icon->set_default_properties(image8icon_prop);
	//	Not Polled
	image8icon->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(image8icon);

	//	Attribute : Image16
	Image16Attrib	*image16 = new Image16Attrib();
	Tango::UserDefaultAttrProp	image16_prop;
	image16_prop.set_description("Image (18bit depth) of the camera");
	image16_prop.set_label("Image8");
	//	unit	not set for Image16
	//	standard_unit	not set for Image16
	//	display_unit	not set for Image16
	//	format	not set for Image16
	//	max_value	not set for Image16
	//	min_value	not set for Image16
	//	max_alarm	not set for Image16
	//	min_alarm	not set for Image16
	//	max_warning	not set for Image16
	//	min_warning	not set for Image16
	//	delta_t	not set for Image16
	//	delta_val	not set for Image16
	
	image16->set_default_properties(image16_prop);
	//	Not Polled
	image16->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(image16);

	//	Attribute : Image16Icon
	Image16IconAttrib	*image16icon = new Image16IconAttrib();
	Tango::UserDefaultAttrProp	image16icon_prop;
	image16icon_prop.set_description("Decimated version of the image used to find the roi region");
	//	label	not set for Image16Icon
	//	unit	not set for Image16Icon
	//	standard_unit	not set for Image16Icon
	//	display_unit	not set for Image16Icon
	//	format	not set for Image16Icon
	//	max_value	not set for Image16Icon
	//	min_value	not set for Image16Icon
	//	max_alarm	not set for Image16Icon
	//	min_alarm	not set for Image16Icon
	//	max_warning	not set for Image16Icon
	//	min_warning	not set for Image16Icon
	//	delta_t	not set for Image16Icon
	//	delta_val	not set for Image16Icon
	
	image16icon->set_default_properties(image16icon_prop);
	//	Not Polled
	image16icon->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(image16icon);

	//	Attribute : Image8Counter
	Image8CounterAttrib	*image8counter = new Image8CounterAttrib();
	Tango::UserDefaultAttrProp	image8counter_prop;
	image8counter_prop.set_description("Image (8bit depth) of the camera.");
	image8counter_prop.set_label("Image8");
	//	unit	not set for Image8Counter
	//	standard_unit	not set for Image8Counter
	//	display_unit	not set for Image8Counter
	//	format	not set for Image8Counter
	//	max_value	not set for Image8Counter
	//	min_value	not set for Image8Counter
	//	max_alarm	not set for Image8Counter
	//	min_alarm	not set for Image8Counter
	//	max_warning	not set for Image8Counter
	//	min_warning	not set for Image8Counter
	//	delta_t	not set for Image8Counter
	//	delta_val	not set for Image8Counter
	
	image8counter->set_default_properties(image8counter_prop);
	//	Not Polled
	image8counter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(image8counter);

	//	Attribute : Image16Counter
	Image16CounterAttrib	*image16counter = new Image16CounterAttrib();
	Tango::UserDefaultAttrProp	image16counter_prop;
	image16counter_prop.set_description("Image (18bit depth) of the camera");
	image16counter_prop.set_label("Image8");
	//	unit	not set for Image16Counter
	//	standard_unit	not set for Image16Counter
	//	display_unit	not set for Image16Counter
	//	format	not set for Image16Counter
	//	max_value	not set for Image16Counter
	//	min_value	not set for Image16Counter
	//	max_alarm	not set for Image16Counter
	//	min_alarm	not set for Image16Counter
	//	max_warning	not set for Image16Counter
	//	min_warning	not set for Image16Counter
	//	delta_t	not set for Image16Counter
	//	delta_val	not set for Image16Counter
	
	image16counter->set_default_properties(image16counter_prop);
	//	Not Polled
	image16counter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(image16counter);

	//	Attribute : ImageSum
	ImageSumAttrib	*imagesum = new ImageSumAttrib();
	Tango::UserDefaultAttrProp	imagesum_prop;
	imagesum_prop.set_description("Moving sum image");
	//	label	not set for ImageSum
	//	unit	not set for ImageSum
	//	standard_unit	not set for ImageSum
	//	display_unit	not set for ImageSum
	imagesum_prop.set_format("%d");
	imagesum_prop.set_max_value("2000000000");
	imagesum_prop.set_min_value("0");
	//	max_alarm	not set for ImageSum
	//	min_alarm	not set for ImageSum
	//	max_warning	not set for ImageSum
	//	min_warning	not set for ImageSum
	//	delta_t	not set for ImageSum
	//	delta_val	not set for ImageSum
	
	imagesum->set_default_properties(imagesum_prop);
	//	Not Polled
	imagesum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(imagesum);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(GigeCamClass::attribute_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void GigeCamClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(GigeCamClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::pipe_factory_before
	/*----- PROTECTED REGION ID(GigeCamClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void GigeCamClass::command_factory()
{
	/*----- PROTECTED REGION ID(GigeCamClass::command_factory_before) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::command_factory_before


	//	Command Start
	StartClass	*pStartCmd =
		new StartClass("Start",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"camera label or ip number",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStartCmd);

	//	Command Stop
	StopClass	*pStopCmd =
		new StopClass("Stop",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopCmd);

	//	Command Reset
	ResetClass	*pResetCmd =
		new ResetClass("Reset",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetCmd);

	//	Command ListCamera
	ListCameraClass	*pListCameraCmd =
		new ListCameraClass("ListCamera",
			Tango::DEV_VOID, Tango::DEVVAR_STRINGARRAY,
			"",
			"camera labels",
			Tango::OPERATOR);
	command_list.push_back(pListCameraCmd);

	//	Command AcquireBackground
	AcquireBackgroundClass	*pAcquireBackgroundCmd =
		new AcquireBackgroundClass("AcquireBackground",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAcquireBackgroundCmd);

	//	Command GetImage8
	GetImage8Class	*pGetImage8Cmd =
		new GetImage8Class("GetImage8",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_CHARARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetImage8Cmd);

	//	Command GetImage16
	GetImage16Class	*pGetImage16Cmd =
		new GetImage16Class("GetImage16",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_USHORTARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetImage16Cmd);

	//	Command GetHorPos
	GetHorPosClass	*pGetHorPosCmd =
		new GetHorPosClass("GetHorPos",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetHorPosCmd);

	//	Command GetVerPos
	GetVerPosClass	*pGetVerPosCmd =
		new GetVerPosClass("GetVerPos",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetVerPosCmd);

	//	Command GetHorSigma
	GetHorSigmaClass	*pGetHorSigmaCmd =
		new GetHorSigmaClass("GetHorSigma",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetHorSigmaCmd);

	//	Command GetVerSigma
	GetVerSigmaClass	*pGetVerSigmaCmd =
		new GetVerSigmaClass("GetVerSigma",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetVerSigmaCmd);

	//	Command GetArea
	GetAreaClass	*pGetAreaCmd =
		new GetAreaClass("GetArea",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetAreaCmd);

	//	Command GetAcquisitionCounter
	GetAcquisitionCounterClass	*pGetAcquisitionCounterCmd =
		new GetAcquisitionCounterClass("GetAcquisitionCounter",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_LONGARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetAcquisitionCounterCmd);

	//	Command GetSaturation
	GetSaturationClass	*pGetSaturationCmd =
		new GetSaturationClass("GetSaturation",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetSaturationCmd);

	//	Command SetReference
	SetReferenceClass	*pSetReferenceCmd =
		new SetReferenceClass("SetReference",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetReferenceCmd);

	//	Command GetPhase
	GetPhaseClass	*pGetPhaseCmd =
		new GetPhaseClass("GetPhase",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetPhaseCmd);

	//	Command SaveScale
	SaveScaleClass	*pSaveScaleCmd =
		new SaveScaleClass("SaveScale",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSaveScaleCmd);

	//	Command RestoreScale
	RestoreScaleClass	*pRestoreScaleCmd =
		new RestoreScaleClass("RestoreScale",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pRestoreScaleCmd);

	//	Command SetMeasurePoint
	SetMeasurePointClass	*pSetMeasurePointCmd =
		new SetMeasurePointClass("SetMeasurePoint",
			Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
			"horizontal pixel position, vertical pixel position",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetMeasurePointCmd);

	//	Command ClearMeasurePoints
	ClearMeasurePointsClass	*pClearMeasurePointsCmd =
		new ClearMeasurePointsClass("ClearMeasurePoints",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pClearMeasurePointsCmd);

	//	Command GetIntensity
	GetIntensityClass	*pGetIntensityCmd =
		new GetIntensityClass("GetIntensity",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetIntensityCmd);

	//	Command GetHorProfile
	GetHorProfileClass	*pGetHorProfileCmd =
		new GetHorProfileClass("GetHorProfile",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetHorProfileCmd);

	//	Command GetVerProfile
	GetVerProfileClass	*pGetVerProfileCmd =
		new GetVerProfileClass("GetVerProfile",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetVerProfileCmd);

	//	Command GetHorFitProfile
	GetHorFitProfileClass	*pGetHorFitProfileCmd =
		new GetHorFitProfileClass("GetHorFitProfile",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetHorFitProfileCmd);

	//	Command GetVerFitProfile
	GetVerFitProfileClass	*pGetVerFitProfileCmd =
		new GetVerFitProfileClass("GetVerFitProfile",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetVerFitProfileCmd);

	//	Command SaveParam
	SaveParamClass	*pSaveParamCmd =
		new SaveParamClass("SaveParam",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSaveParamCmd);

	//	Command ClearReference
	ClearReferenceClass	*pClearReferenceCmd =
		new ClearReferenceClass("ClearReference",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pClearReferenceCmd);

	//	Command ExposureAutoOnce
	ExposureAutoOnceClass	*pExposureAutoOnceCmd =
		new ExposureAutoOnceClass("ExposureAutoOnce",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pExposureAutoOnceCmd);

	//	Command GainAutoOnce
	GainAutoOnceClass	*pGainAutoOnceCmd =
		new GainAutoOnceClass("GainAutoOnce",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGainAutoOnceCmd);

	//	Command GetFitError
	GetFitErrorClass	*pGetFitErrorCmd =
		new GetFitErrorClass("GetFitError",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_LONGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetFitErrorCmd);

	//	Command GetBunchNumber
	GetBunchNumberClass	*pGetBunchNumberCmd =
		new GetBunchNumberClass("GetBunchNumber",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_LONGARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetBunchNumberCmd);

	//	Command GetMaxVal
	GetMaxValClass	*pGetMaxValCmd =
		new GetMaxValClass("GetMaxVal",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_LONGARRAY,
			"mode (0,1,2), more parameters",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetMaxValCmd);

	//	Command GetGain
	GetGainClass	*pGetGainCmd =
		new GetGainClass("GetGain",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetGainCmd);

	//	Command GetExposure
	GetExposureClass	*pGetExposureCmd =
		new GetExposureClass("GetExposure",
			Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_LONGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetExposureCmd);

	/*----- PROTECTED REGION ID(GigeCamClass::command_factory_after) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		GigeCamClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void GigeCamClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(GigeCamClass::create_static_att_list) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		GigeCamClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void GigeCamClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		GigeCam *dev = static_cast<GigeCam *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(GigeCamClass::erase_dynamic_attributes) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : GigeCamClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *GigeCamClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(GigeCamClass::Additional Methods) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	GigeCamClass::Additional Methods
} //	namespace
